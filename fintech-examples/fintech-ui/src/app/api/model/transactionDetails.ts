/**
 * Open Banking Gateway FinTech Example API
 * This is a sample API that show how develop FinTech use case that invoke banking APIs.  #### User Agent This Api assumes that the PsuUserAgent is a modern browsers that * automatically detects the \"302 Found\" response code and proceeds with the associated location url, * stores httpOnly cookies sent with the redirect under the given domain and path as defined by [RFC 6265](https://tools.ietf.org/html/rfc6265).  This Api also assumes any other PsuUserAgent like a native mobile or a desktop application can simulate this same behavior of a modern browser with respect to 30X and Cookies.  #### SessionCookies and XSRF After a PSU is authenticated with the FinTech environment (either through the simple login interface defined here, or through an identity provider), the FinTechApi will establish a session with the FinTechUI. This is done by the mean of using a cookie called SessionCookie. This SessionCookie is protected by a corresponding XSRF-TOKEN. * The request that sets a SessionCookie also carries a corresponding X-XSRF-TOKEN in the response header. * It is the responsibility of the FinTechUI to parse this X-XSRF-TOKEN and send it back to the FinTechApi with each subsequen request.  #### Redirecting to the ConsentAuthorisationApi Any response of the FinTechApi that redirects the PSU to the ConsentAuthorisationApi makes sure following happens: * that the exisitng SessionCookie is deleted, as there is no explicite login. * that a RedirectCookie is set, so the user can be authenticated again when sent back to the FinTechApi. * The url that sends the user back to the FinTechApi must carry a redirecState parameter that matches the corresponding redirect cookie.  While redirecting the user to the ConsentAuthorisationApi, there is no certainty upon how long the consent session will take. For this reason, it is better to set a separated RedirectSessionCookie that has a life set to the expected max dureation of the consent authorisation session.  #### Reloading the FinTechUI Reloading the FinTechUI, we will also loose the XSRF parameter that is used to validate the SessionCookie. This is why we set RedirectCookie (that this time has a very short life span). The url reloading the FinTechUI must carry a redirectState parameter that will be used to invoke the /afterReload endpoint of the FinTechApi. Thus leading to a new SessionCookie and corresponding XSRF parameter. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ReportExchangeRate } from './reportExchangeRate';
import { Amount } from './amount';
import { AccountReference } from './accountReference';
import { PurposeCode } from './purposeCode';


/**
 * Transaction details.
 */
export interface TransactionDetails { 
    /**
     * the Transaction Id can be used as access-ID in the API, where more details on an transaction is offered. If this data attribute is provided this shows that the AIS can get access on more details about this transaction using the Get transaction details request. 
     */
    transactionId?: string;
    /**
     * Is the identification of the transaction as used e.g. for reference for deltafunction on application level. The same identification as for example used within camt.05x messages. 
     */
    entryReference?: string;
    /**
     * Unique end to end identity.
     */
    endToEndId?: string;
    /**
     * Identification of Mandates, e.g. a SEPA Mandate ID.
     */
    mandateId?: string;
    /**
     * Identification of a Cheque.
     */
    checkId?: string;
    /**
     * Identification of Creditors, e.g. a SEPA Creditor ID.
     */
    creditorId?: string;
    /**
     * The date when an entry is posted to an account on the ASPSPs books. 
     */
    bookingDate?: string;
    /**
     * The Date at which assets become available to the account owner in case of a credit.
     */
    valueDate?: string;
    transactionAmount: Amount;
    /**
     * Array of exchange rates.
     */
    currencyExchange?: Array<ReportExchangeRate>;
    /**
     * Creditor Name.
     */
    creditorName?: string;
    creditorAccount?: AccountReference;
    /**
     * Ultimate Creditor.
     */
    ultimateCreditor?: string;
    /**
     * Debtor Name.
     */
    debtorName?: string;
    debtorAccount?: AccountReference;
    /**
     * Ultimate Debtor.
     */
    ultimateDebtor?: string;
    /**
     * Unstructured remittance information. 
     */
    remittanceInformationUnstructured?: string;
    /**
     * Reference as contained in the structured remittance reference structure (without the surrounding XML structure).  Different from other places the content is containt in plain form not in form of a structered field. 
     */
    remittanceInformationStructured?: string;
    /**
     * Might be used by the ASPSP to transport additional transaction related information to the PSU. 
     */
    additionalInformation?: string;
    purposeCode?: PurposeCode;
    /**
     * Bank transaction code as used by the ASPSP and using the sub elements of this structured code defined by ISO 20022.  This code type is concatenating the three ISO20022 Codes   * Domain Code,   * Family Code, and   * SubFamiliy Code by hyphens, resulting in �DomainCode�-�FamilyCode�-�SubFamilyCode�. 
     */
    bankTransactionCode?: string;
    /**
     * Proprietary bank transaction code as used within a community or within an ASPSP e.g. for MT94x based transaction reports. 
     */
    proprietaryBankTransactionCode?: string;
}

