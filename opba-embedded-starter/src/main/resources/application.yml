server:
  # Port to use when starting application
  port: 8085
spring:
  # Datasource connection properties
  datasource:
    # Database URL
    url: jdbc:postgresql://localhost:5432/open_banking?currentSchema=banking_protocol
    # To use Unix socket, uncomment the line below:
    # url: jdbc:postgresql:///open_banking?socketFactory=org.newsclub.net.unix.AFUNIXSocketFactory$FactoryArg&socketFactoryArg=/var/run/postgresql/.s.PGSQL.5432

    # Database credentials
    username: postgres
    password: docker
    # JDBC connection pool
    type: com.zaxxer.hikari.HikariDataSource
    # Database connection pool properties
    driver-class-name: org.postgresql.Driver
    hikari:
      # Database schema name
      schema: banking_protocol
      auto-commit: false

  # Hibernate JPA properties
  jpa:
    hibernate:
      naming:
        physical-strategy: de.adorsys.opba.db.hibernate.PrefixAndSnakeCasePhysicalNamingStrategy
      # DDL is handled by Liquibase
      ddl-auto: validate
    open-in-view: false

  # Liquibase properties (Database migration)
  liquibase:
    # Enables Liquibase
    enabled: true
    # Path to Liquibase DB change log
    change-log: classpath:migration/master.xml
    parameters:
      # Prefix for OBG tables in database
      table-prefix: opb_
      # Sandbox URLs
      adorsys-sandbox-url: http://localhost:20014
      adorsys-sandbox-oauth-server-url: http://localhost:20015/oauth/authorization-server
      adorsys-hbci-sandbox-url: http://localhost:8090/hbci-mock/
    # Which migrations types to apply (pre-load bank data into database)
    contexts: dev,mock-banks

# Actuator:
management:
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: info,health

# Application configuration
api:
  banking:
    # Admin API properties
    admin-api:
      security:
        # Admin API credentials
        login: Aladdin
        password: OpenSesame
        # URL-patterns to be protected
        url-patterns-to-protect:
          - /admin/*

    # fetch bank-Info from iban
    bank-info:
      # Query to fetch bank info from db
      query: >
        SELECT id, uuid, name, bic, bank_code
        FROM opb_bank
        WHERE bank_code = :bankCode
          AND (:onlyActive IS FALSE OR active IS TRUE)
        LIMIT 1

    # Bank-search API properties
    bank-search:
      # The index of the first result
      start: 0
      # Maximum number of entries in the response
      max: 10
      # Query to search banks by parameters in DB
      query:
        "SELECT id, uuid, name, bic, bank_code, active, word_similarity(:keyword, name) as sml
        FROM opb_bank WHERE ((word_similarity(:keyword, name) >= 0.6) AND (NOT :onlyActive OR active))
        UNION
        SELECT id, uuid, name, bic, bank_code, active, word_similarity(:keyword, bic) as sml
        FROM opb_bank WHERE ((word_similarity(:keyword, bic) >= 0.8) AND (NOT :onlyActive OR active))
        UNION
        SELECT id, uuid, name, bic, bank_code, active, word_similarity(:keyword, bank_code) as sml
        FROM opb_bank WHERE ((word_similarity(:keyword, bank_code) >= 0.8) AND (NOT :onlyActive OR active))
        ORDER BY sml DESC, id
        LIMIT :max
        OFFSET :start"
    # Signature-based security of FinTech consumable API
    security:
      verification:
        # Signature validity time (how long request signature will be valid)
        request-validity-window: 5m
        # Use this claim name in the Jwt
        claim-name-key: sign-data
        urls-to-be-validated:
          # templates for web filter
          - /v1/banking/*
      # Known API consumers
      consumers:
        MY-SUPER-FINTECH-ID:
          name: Adorsys Fintech
          public-key: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0QhZVg5KKh9YzXFT8kuTdsxYHgJ2us+idNym+L4P09O5BjJaIZPbx7jBCKf8CNLNMV+HuNa6aPwETIyGsYG9reJAupA+F0ETxzDZ/70zprnte0eEfitwA2fy3lq0VOwtb2NuaRQBAcJZC+Dni3UAjR4bfWblw+OzWSrhj8wNicyRgE/ov8bFiyhqYZrBx1NW8oQcSC5EXmevu3nna3izlBbZ/63OteHHZUmbyufW7hU6Ck9lq/cP4QMKmiMDj020ptwox9g4hCcwy0iL+qIcpGe6gfuBMMtt9XQnRuxIQeOQ8rYq2uaU6iOgj3vbSekqwrOCtKf/MooEcEGSvIa+EwIDAQAB
        ANOTHER-FINTECH-ID:
          name: Another Fintech
          public-key: MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDJ6ETZBHHSFNUAvpKuRhzzOi2HuupfTnttJdZhYsPHTE1XPlo4D2RDhjDLECMXMmJNwKS1p1xZ/p836RhhVJ/lWTNXqAxRF3nfvvQXirROP91LPjyOQIF7IoS+Wm7VquJlKRR7/+tmJMSOwyf5727M0Wttfrsj/w/UVOhYlsUtKwIDAQAB
  # General (non-banking) API security
  security:
    token-validity-duration: PT5M # PLEASE SYNC api.security.token-validity-duration, api.cookie.max-age and facade.expirable.expire-after-write
    redirect-token-validity-duration: PT60M
    jws-algo: RS256
    # Example private-public keypair for DEMO-purposes. Generated using TokenSignVerifyTest.generateNewTppKeyPair(). Production use should load private key from secure place.
    private-key: MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC7wtbVBBDWlZSV7JsDgEHBTHBT0FH0YZh96WwFPyg88Iqsif1Xv38ZoGqcHhYLswyzFiNyEuZWblza1v05LX+pW4oU0Pi/ITX4biUQr5pFquSVV0qOBYOf0JCzxIDsKK1TiFxhz3CRFZ+1DXc0x5ZJASqKxOwVf+rCSKI3yB0Z76+AJUfRb0yiLvMW38iWkC79WJcyXXHkD8OGEvyJadbsipQxxDOGjzM0fa/vBzd8EeRcpC8fsxfH/d8WJ4oB7f26eW2dTY2wKahlgaKyjmmc7DITrPF8nRW39hH54DDbtaTyWCX6v3jg9iwcgYkB9AWLYYxzyR4n2VubGBXpizhrAgMBAAECggEAeR6Cvv7Ubdgn9V6f0G5X/H12qFplw6OBXxfIWsoXBtiUXCDXkFczgjB9FSBDUGC7/Hp3ewq+E1s2AuVUjCHRjEpElJEJJSIjUpKazly4w+AtfDjHGz5rXhiIf65vC+hhhtUb4uyRzMWKNJzvHNjzFTzvWH0XXfcaVSHNovYv754VjGzwtdhgj0w8QYRsCq4evBsRCl+POuJdKYv9BDYj3ADffVgDU0Txs8Q2lYvm16V0Ihgbcd6Dq4WblZY3Bkh0s9WpZVZdIy/R6bLWx1BSJwHiT267Oiq0U+REW4J584FryIrsqMTNJPjEbybEskniCujHxkGnRixO1BJZPvdIwQKBgQD1Zd4oNhO7SVX8H2+bYTEjKxZYSA2B6E+7pWGn1d4cOX2jjNhj1SQkLfWXQg4JFljTh9pL3K0moL8MkrLoYq+TTqEngMh7OJtEYySbec5ZSA6MM36VDYbHyNvjKHPrzwtzzbbYOqFXF8OZT5Eq9X+jQTmqcmGnYipmcWPRdK1J4wKBgQDD34Au37qsEM6f7VVm7zY/hXb+bZ1px6nkS+QuW2hp270brENq3LNtcA3oUX8yr/X8H9OEyO7+oevFcEkHRyDMce80VrO1UytXVQDo7nF6vepbPYy8u/rF/FLicrkLPoqQCDnL+NYVtnZo/oaXfw506VMBbU20+Yt3eUoxN2m92QKBgHyO3UmJ0VAh9DwJ9MtodNmF+EyNHhYPRdFYK45WNuwanlQSnI9n03VtwpepFpi0OBf+f+Y7t8PAmdiW6aqc1MOviIsVii1JWT5IGH+2PvAAbCnrxVeAyyXDJSFTGivaJtT72NA+SkB7tnOt+GBWxhemds+2SSz93cmryl+5mm/DAoGBAKafS+WUALI6oeq99DZaK6WhnXYWPSAs70L7pCIjNBFJEfemdLtE/4WLGumT2kZ+FRzi3gZI/7WwfGY6fIUqZqZEDZ5SWxFWrLnf36RGolYtlF0FYOF0b4FYghGMUglUrH6V4MS46zURQG1Uh538QYoGqcu+9amL1q5NiWWQo+0RAoGBAO+gk6lD3U1gUqAzSo3ri8gszk2Jopky+lIUy9y3ebsFsc3EetT7A/OgiSj4KZAgHKJiCesbq1OL7VeTGpsl0dqXPNW2Mh+xVVMJHGJ7ydZ8lvlNGQTNSvBwZwjJBsZMHCSgjdOGDF88NJKo2/Bjlhdg7tWp2qTkTVm7hTdYUY4+
    public-key: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu8LW1QQQ1pWUleybA4BBwUxwU9BR9GGYfelsBT8oPPCKrIn9V79/GaBqnB4WC7MMsxYjchLmVm5c2tb9OS1/qVuKFND4vyE1+G4lEK+aRarklVdKjgWDn9CQs8SA7CitU4hcYc9wkRWftQ13NMeWSQEqisTsFX/qwkiiN8gdGe+vgCVH0W9Moi7zFt/IlpAu/ViXMl1x5A/DhhL8iWnW7IqUMcQzho8zNH2v7wc3fBHkXKQvH7MXx/3fFieKAe39unltnU2NsCmoZYGiso5pnOwyE6zxfJ0Vt/YR+eAw27Wk8lgl+r944PYsHIGJAfQFi2GMc8keJ9lbmxgV6Ys4awIDAQAB
    sign-algo: RSA

  # Common cookie template
  cookie:
    # Default org.springframework.http.ResponseCookie parameters
    secure: false # localhost-only - TODO application-dev.yml for dev env?
    max-age: ${api.security.token-validity-duration} # PLEASE SYNC api.security.token-validity-duration, api.cookie.max-age and facade.expirable.expire-after-write
    redirect-max-age: ${api.security.redirect-token-validity-duration}
    http-only: true
    path: /
    same-site: Lax
    # Template for building redirect URL from ASPSP
    redirect-path-template: ${facade.urls.authorization-session-key.cookie.redirect-path-template}
    urls-to-be-validated:
      # templates for web filter
      - /v1/psu/*
      - /v1/consent/*
      # templates for string matcher
      - /v1/psu/.+/renewal-authorization-session-key
      - /v1/consent/.+

facade:
  urls:
    # Consent UI URL
    embedded-ui-base-url: http://localhost:4200
    redirect:
      # Xsrf redirect code will be kept same for entire authorization session. Improves application behavior in unstable network conditions
      session-wide-redirect-code: false
      # Redirection URL for consent association
      consent-login:
        # URLs of Consent UI start pages for AIS and PIS flows
        page:
          for-ais: ${facade.urls.embedded-ui-base-url}/auth/ais/{authorizationSessionId}/login?redirectCode={fintechUserTempPassword}
          for-pis: ${facade.urls.embedded-ui-base-url}/auth/pis/{authorizationSessionId}/login?redirectCode={fintechUserTempPassword}
          for-ais-anonymous: ${facade.urls.embedded-ui-base-url}/auth/ais/{authorizationSessionId}/anonymous?redirectCode={fintechUserTempPassword}
          for-pis-anonymous: ${facade.urls.embedded-ui-base-url}/auth/pis/{authorizationSessionId}/anonymous?redirectCode={fintechUserTempPassword}
        # Password config
        password:
          # Password size in bytes (minimal value - at least 8 bytes of entropy)
          byte-size: 8
    # Consent authorization cookie key path
    authorization-session-key:
      cookie:
        # Templates for web filter
        path-templates: /embedded-server/v1/consent/{authorizationSessionId}, /embedded-server/v1/psu/ais/{authorizationSessionId}/renewal-authorization-session-key
        # Template for building redirect URL
        redirect-path-template: /embedded-server/v1/consent/{authorizationSessionId}/fromAspsp/*
  expirable:
    # Protocol data cache lifetime
    expire-after-write: PT5M # PLEASE SYNC api.security.token-validity-duration, api.cookie.max-age and facade.expirable.expire-after-write

  encryption:
    # Consent encryption keys protection settings
    datasafe:
      read-keystore:
        psu: I-M-A-SAMPLE-PSU-PASSWORD-REPLACE-ME
        fintech: I-M-A-SAMPLE-FINTECH-PASSWORD-REPLACE-ME
        fintech-user: I-M-A-SAMPLE-FINTECH-USER-PASSWORD-REPLACE-ME
    # PSU consent encryption
    psu:
      key-pair:
        cipher-algo: AES128_CBC
        key-algo: RSA
        len: 2048
    # Consent requirements encryption
    consent-spec:
      secret-key:
        key-algo: AES
        cipher-algo: AES/GCM/NoPadding
        iv-size: 12
        len: 128
    # Internal FinTech data
    fintech-only:
      key-pair:
        pair-count: 3
        cipher-algo: AES256_CBC
        key-algo: RSA
        len: 2048
  # Datasafe security configuration
  datasafe:
    # Which keystore to use and how to encrypt keys in it
    key-store:
      type: BCFKS
      encryption-algo: AES256_KWP
      pbkdf:
        pbkdf2:
          algo: PRF_SHA512
          saltLength: 16
          iterCount: 10240
      mac-algo: HmacSHA3_512
      password-keys-algo: PBEWithHmacSHA256AndAES_128
    # Which keys to create in keystore
    keys:
      enc-key-number: 1
      sign-key-number: 1
      # Secret key creation
      secret:
        algo: AES
        size: 128
      # Encrypting key creation
      encrypting:
        algo: RSA
        size: 2048
        sig-algo: SHA256withRSA
      # Signing key creation
      signing:
        algo: RSA
        size: 2048
        sig-algo: SHA256withRSA
    # How to encrypt documents
    cms:
      algo: AES128_GCM

# Properties of OBG protocols
protocol:
  # XS2A protocol
  xs2a:
    # XS2A service URLs
    urls:
      # AIS related URLs
      ais:
        # To ASPSP redirection page (for Redirect SCA)
        to-aspsp: ${facade.urls.embedded-ui-base-url}/ais${protocol.xs2a.urls.common.to-aspsp}
        # Consent related URLs that will be provided to ASPSP to get results of operation
        web-hooks:
          # URL that represents page saying that consent creation was OK (comes before consent result page) or acts as redirect-back URI for OAuth2
          ok: ${protocol.xs2a.urls.common.web-hooks.ok}
          # URL that represents page saying that consent creation was not OK (comes before consent result page)
          nok: ${protocol.xs2a.urls.common.web-hooks.nok}
          # URL that represents consent acquisition result
          result: ${facade.urls.embedded-ui-base-url}/ais${protocol.xs2a.urls.common.web-hooks.result}
        # Generic parameters input urls - i.e. password page.
        parameters:
          # Page with generic consent input form and other parameters like PSU ID, can be thought as landing page for consent data input
          provide-more: ${facade.urls.embedded-ui-base-url}/ais${protocol.xs2a.urls.common.parameters.provide-more}
          # Page where the user provides his PIN or ASPSP password
          provide-psu-password: ${facade.urls.embedded-ui-base-url}/ais${protocol.xs2a.urls.common.parameters.provide-psu-password}
          # Page where the user can select multiple SCA methods (SMS, email) for 2FA or multifactor authorization
          select-sca-method: ${facade.urls.embedded-ui-base-url}/ais${protocol.xs2a.urls.common.parameters.select-sca-method}
          # Page where user reports SCA challenge result (i.e. SMS secret code from ASPSP)
          report-sca-result: ${facade.urls.embedded-ui-base-url}/ais${protocol.xs2a.urls.common.parameters.report-sca-result}
          # Page where the user can provide IBAN list for dedicated consent
          provide-psu-iban: ${facade.urls.embedded-ui-base-url}/ais${protocol.xs2a.urls.common.parameters.provide-psu-iban}
          # Page where the user waits until decoupled SCA is finalized with the external device
          wait-decoupled-sca: ${facade.urls.embedded-ui-base-url}/ais${protocol.xs2a.urls.common.parameters.wait-decoupled-sca}
      # PIS related URLs
      pis:
        # To ASPSP redirection page (for Redirect SCA)
        to-aspsp: ${facade.urls.embedded-ui-base-url}/pis${protocol.xs2a.urls.common.to-aspsp}
        # Consent related URLs that will be provided to ASPSP to get results of operation
        web-hooks:
          # URL that represents page saying that consent creation was OK (comes before consent result page) or acts as redirect-back URI for OAuth2
          ok: ${protocol.xs2a.urls.common.web-hooks.ok}
          # URL that represents page saying that consent creation was not OK (comes before consent result page)
          nok: ${protocol.xs2a.urls.common.web-hooks.nok}
          # URL that represents consent acquisition result
          result: ${facade.urls.embedded-ui-base-url}/pis${protocol.xs2a.urls.common.web-hooks.result}
        # Generic parameters input urls - i.e. password page.
        parameters:
          # Page with generic consent input form and other parameters like PSU ID, can be thought as landing page for consent data input
          provide-more: ${facade.urls.embedded-ui-base-url}/pis${protocol.xs2a.urls.common.parameters.provide-more}
          # Page where the user provides his PIN or ASPSP password
          provide-psu-password: ${facade.urls.embedded-ui-base-url}/pis${protocol.xs2a.urls.common.parameters.provide-psu-password}
          # Page where the user can select multiple SCA methods (SMS, email) for 2FA or multifactor authorization
          select-sca-method: ${facade.urls.embedded-ui-base-url}/pis${protocol.xs2a.urls.common.parameters.select-sca-method}
          # Page where user reports SCA challenge result (i.e. SMS secret code from ASPSP)
          report-sca-result: ${facade.urls.embedded-ui-base-url}/pis${protocol.xs2a.urls.common.parameters.report-sca-result}
          # Page where the user can provide IBAN list for dedicated consent
          provide-psu-iban: ${facade.urls.embedded-ui-base-url}/pis${protocol.xs2a.urls.common.parameters.provide-psu-iban}
          # Page where the user waits until decoupled SCA is finalized with the external device
          wait-decoupled-sca: ${facade.urls.embedded-ui-base-url}/pis${protocol.xs2a.urls.common.parameters.wait-decoupled-sca}
      # Common for AIS and PIS flows URL patterns
      common:
        to-aspsp: /{authSessionId}/to-aspsp-redirection?redirectCode={redirectCode}
        web-hooks:
          ok: ${facade.urls.embedded-ui-base-url}/ais/{authSessionId}/restore-session/{aspspRedirectCode}/ok
          nok: ${facade.urls.embedded-ui-base-url}/ais/{authSessionId}/restore-session/{aspspRedirectCode}/nok
          result: /{authSessionId}/consent-result?redirectCode={redirectCode}
        parameters:
          provide-more: /{authSessionId}?redirectCode={redirectCode}
          provide-psu-password: /{authSessionId}/authenticate?wrong={isWrongCreds}
          select-sca-method: /{authSessionId}/select-sca-method
          report-sca-result: /{authSessionId}/sca-result/{selectedScaType}?wrong={isWrongCreds}
          provide-psu-iban: /{authSessionId}/entry-consent-transactions/dedicated-account-access?wrong={isWrongCreds}
          wait-decoupled-sca: /{authSessionId}/wait-sca-finalization?redirectCode={redirectCode}
    # Message codes that can be received from ASPSP
    aspspmessages:
      invalid-credentials: PSU_CREDENTIALS_INVALID
      invalid-consent: FORMAT_ERROR
      missing-oauth2-token: TOKEN_INVALID
      missing-oauth2-token-message: Please retrieve token first
      consent-gone:
        ACCESS_EXCEEDED: CONSENT_ACCESS_EXCEEDED_LIMIT
        CONSENT_UNKNOWN: CONSENT_UNKNOWN
        CONSENT_EXPIRED: CONSENT_EXPIRED
        CONSENT_INVALID: CONSENT_INVALID
    # XS2A protocol qwac-keystore credentials
    pkcs12:
      keystore: sample-qwac.keystore
      password: password
  # HBCI protocol
  hbci:
    adapter:
      # hbci-product: product - Your product ID here
      # hbci-version: 300 - Your HBCI ID here
      # Bank codes of mock HBCI banks
      adorsys-mock-banks-blz:
        - 10000001
        - 20000002
        - 30000003
    # HBCI service URLs
    urls:
      # AIS related URLs
      ais:
        # Redirect links for UI screens - i.e. which screen to use for password input
        redirect:
          # To ASPSP redirection page (for Redirect SCA)
          to-aspsp: ${facade.urls.embedded-ui-base-url}/ais/{authSessionId}/to-aspsp-redirection
          # Consent related URLs that will be provided to ASPSP to get results of operation
          web-hooks:
            # URL that represents page saying that consent creation was OK (comes before consent result page)
            ok: ${facade.urls.embedded-ui-base-url}/ais/{authSessionId}/restore-session/{aspspRedirectCode}/ok
            # URL that represents page saying that consent creation was not OK (comes before consent result page)
            nok: ${facade.urls.embedded-ui-base-url}/ais/{authSessionId}/restore-session/{aspspRedirectCode}/nok
            # URL that represents consent acquisition result
            result: ${facade.urls.embedded-ui-base-url}/ais/{authSessionId}/consent-result?redirectCode={redirectCode}
          # Generic parameters input urls - i.e. password page.
          parameters:
            max-array-size: 32
            # Page with generic consent input form and other parameters like PSU ID, can be thought as landing page for consent data input
            provide-more: ${facade.urls.embedded-ui-base-url}/ais/{authSessionId}?redirectCode={redirectCode}
            # Page where the user provides his PIN or ASPSP password
            provide-psu-password: ${facade.urls.embedded-ui-base-url}/ais/{authSessionId}/authenticate?wrong={isWrongCreds}
            # Page where the user can select multiple SCA methods (SMS, email) for 2FA or multifactor authorization
            select-sca-method: ${facade.urls.embedded-ui-base-url}/ais/{authSessionId}/select-sca-method
            # Page where user reports SCA challenge result (i.e. SMS secret code from ASPSP)
            report-sca-result: ${facade.urls.embedded-ui-base-url}/ais/{authSessionId}/sca-result/{selectedScaType}?wrong={isWrongCreds}
            # Page where the user can provide IBAN list for dedicated consent
            provide-psu-iban: ${facade.urls.embedded-ui-base-url}/ais/{authSessionId}/entry-consent-transactions/dedicated-account-access?wrong={isWrongCreds}
      # PIS related URLs
      pis:
        # Redirect links for UI screens - i.e. which screen to use for password input
        redirect:
          # To ASPSP redirection page (for Redirect SCA)
          to-aspsp: ${facade.urls.embedded-ui-base-url}/pis/{authSessionId}/to-aspsp-redirection
          # Consent related URLs that will be provided to ASPSP to get results of operation
          web-hooks:
            # URL that represents page saying that consent creation was OK (comes before consent result page)
            ok: ${facade.urls.embedded-ui-base-url}/pis/{authSessionId}/restore-session?state=ok&aspspRedirectCode={aspspRedirectCode}
            # URL that represents page saying that consent creation was not OK (comes before consent result page)
            nok: ${facade.urls.embedded-ui-base-url}/pis/{authSessionId}/restore-session?state=nok&aspspRedirectCode={aspspRedirectCode}
            # URL that represents consent acquisition result
            result: ${facade.urls.embedded-ui-base-url}/pis/{authSessionId}/consent-result?redirectCode={redirectCode}
          # Generic parameters input urls - i.e. password page.
          parameters:
            max-array-size: 32
            # Page with generic consent input form and other parameters like PSU ID, can be thought as landing page for consent data input
            provide-more: ${facade.urls.embedded-ui-base-url}/pis/{authSessionId}?redirectCode={redirectCode}
            # Page where the user provides his PIN or ASPSP password
            provide-psu-password: ${facade.urls.embedded-ui-base-url}/pis/{authSessionId}/authenticate?wrong={isWrongCreds}
            # Page where the user can select multiple SCA methods (SMS, email) for 2FA or multifactor authorization
            select-sca-method: ${facade.urls.embedded-ui-base-url}/pis/{authSessionId}/select-sca-method
            # Page where user reports SCA challenge result (i.e. SMS secret code from ASPSP)
            report-sca-result: ${facade.urls.embedded-ui-base-url}/pis/{authSessionId}/sca-result/{selectedScaType}?wrong={isWrongCreds}
            # Page where the user can provide IBAN list for dedicated consent
            provide-psu-iban: ${facade.urls.embedded-ui-base-url}/pis/{authSessionId}/entry-consent-transactions/dedicated-account-access?wrong={isWrongCreds}
    # HBCI protocol SCA types
    sca:
      authentication-types:
        SMS: "SMS_OTP"
        MOBILE: "SMS_OTP"
        CHIP: "CHIP_OTP"
        PHOTO: "PHOTO_OTP"
        PUSH: "PUSH_OTP"
        EMAIL: "SMTP_OTP"
  # Is an optional protocol from extensions
  finapi:
    # FinApi service's URLs
    api-url: https://sandbox.finapi.io
    webform-api-url: https://webform-sandbox.finapi.io
    token-url: ${protocol.finapi.api-url}/oauth/token
    banks-url: ${protocol.finapi.api-url}/api/v1/banks
    # Requested from FinApi token-scope
    token-scope: all
    # FinApi client's credentials
    client-id: dummy
    client-secret: dummy
    # FinApi client's cache properties
    client-api-cache-size: 100
    client-api-expire-after-access: PT30M
    # URL to redirect after ASPSP flow
    from-aspsp-url: ${facade.urls.embedded-ui-base-url}/ais/{authSessionId}/restore-session/{aspspRedirectCode}/ok

    bank-service:
      # Enables auto-updating of FinApi banks cache
      auto-update-banks-cache: false
      # Enables updating banks in database from the banks cache
      update-bank-data-in-db: false
      # If enabled deprecated banks will get status "active" = false
      make-deprecated-bank-data-inactive: false

      # URL to download list of common OBG banks
      obg-banks-url: https://raw.githubusercontent.com/adorsys/open-banking-gateway/develop/opba-db/src/main/resources/migration/migrations/csv/v0/0-banks.csv

      # Path to store downloaded FinApi banks
      finapi-bank-data-path: /tmp

      # FinApi banking database update scheduler settings (every day at 00:00 by default)
      cron:
        expression: 0 0 0 * * *

# Flowable comes for all protocols shared
bpmnshared:
  flowable:
    serialization:
      serialize-only-packages:
        - de.adorsys.opba.protocol.bpmnshared.dto.context
        - de.adorsys.opba.protocol.xs2a.context
        - de.adorsys.opba.protocol.hbci.context
        - de.adorsys.opba.protocol.hbci.service.protocol.ais.dto
    expirable:
      expire-after-write: PT600S
    # TODO: re-enable retry after proper error handling implementation
    number-of-retries: 0
flowable:
  process-definition-location-prefix: classpath*:/processes/**/
