@startuml
legend top left
  <b>Combined</b>
  embedded (Extra user parameters)
  and redirect (ASPSP authorization)
  authorization when  <b>consent is missing</b>
endlegend

actor FinTech
actor User

collections TppBackend

box "TPP API"
control TppBankingApiAisController
control ConsentServiceController
participant FacadeResponseMapper
endbox

box "OPBA-Facade"
collections FacadeService
database Database
participant ServiceContextProvider
participant ProtocolSelector
participant Spring
participant ProtocolResultHandler
endbox

box "XS2A-Protocol"
participant Xs2aListAccountsEntrypoint
participant Xs2aUpdateAuthorization
participant Xs2aFromAspspRedirect
participant Xs2aResultBodyExtractor
collections Xs2aServices
participant OutcomeMapper
endbox

boundary ASPSP

== FinTech asks for user account list ==
FinTech [#blue]-> TppBackend : GET /accounts\n(Fintech user info, bank id, etc.)
TppBackend [#blue]-> TppBankingApiAisController : getAccounts
TppBankingApiAisController [#blue]-> FacadeService : Facade.execute()
FacadeService [#blue]-> ServiceContextProvider : Create facade context from request
FacadeService <-[#blue] ServiceContextProvider : ServiceContext
FacadeService [#blue]-> ProtocolSelector : Select bank protocol from request type and bank id
ProtocolSelector [#blue]-> FacadeService : BankProtocol
FacadeService [#blue]-> Spring : Find bean - Bean(BankProtocol.protocolBeanName) extends Action
FacadeService <-[#blue] Spring : It is Xs2aListAccountsEntrypoint service bean
FacadeService [#blue]-> Xs2aListAccountsEntrypoint : Xs2aListAccountsEntrypoint.execute(ServiceContext)
Xs2aListAccountsEntrypoint [#blue]-> Xs2aServices
Xs2aServices [#blue]-> Database : Consent for service session
Xs2aServices <-[#blue] Database : No consent
Xs2aServices [#blue]-> Xs2aServices : Validate API input -\ndo we have enough data (Mocked execution)
Xs2aServices [#blue]-> Xs2aListAccountsEntrypoint : ValidationIssue[] -> User input has missing parameters
Xs2aListAccountsEntrypoint [#blue]-> OutcomeMapper : Translate ValidationIssue[]
OutcomeMapper [#blue]-> Xs2aListAccountsEntrypoint : ContextBasedValidationErrorResult
Xs2aListAccountsEntrypoint [#blue]-> FacadeService : ContextBasedValidationErrorResult
FacadeService [#blue]-> ProtocolResultHandler : Translate ContextBasedValidationErrorResult -> FacadeStartAuthorizationResult
ProtocolResultHandler [#blue]-> Database : Authorization session present?
Database [#blue]-> ProtocolResultHandler : No authorization session
ProtocolResultHandler [#blue]-> Database : Create authorization session
ProtocolResultHandler [#blue]-> TppBankingApiAisController : process FacadeStartAuthorizationResult
TppBankingApiAisController [#blue]-> FacadeResponseMapper : translate FacadeStartAuthorizationResult
FacadeResponseMapper [#blue]-> TppBankingApiAisController : This is 202 code with redirection to Embedded authorization
TppBankingApiAisController [#blue]-> TppBackend : 202 Embedded authorization
TppBackend [#blue]-> FinTech : 202 Embedded authorization
FinTech [#blue]-> FinTech : Store <b>service session id</b>

FinTech [#orange]-> User : Redirect user to\n'Embedded authorization'\nform using 'Location' header

== User authorizes this request (embedded to provide i.e. PSU id) ==
loop Until user input has not enough parameters
User [#green]-> TppBackend : POST /consent/embedded\n(Consent valid until, which accounts, etc.)
TppBackend [#green]-> ConsentServiceController : embeddedUsingPOST
ConsentServiceController [#green]-> FacadeService : Facade.execute()
FacadeService [#green]-> ServiceContextProvider : Create facade context from request
FacadeService <-[#green] ServiceContextProvider : ServiceContext
FacadeService [#green]-> ProtocolSelector : Select bank protocol by using authorization session id
ProtocolSelector [#green]-> Database : Read authorization session
Database [#green]-> ProtocolSelector: Bank protocol id from authorization session
ProtocolSelector [#green]-> FacadeService : BankProtocol
FacadeService [#green]-> Spring : Find bean - Bean(BankProtocol.protocolBeanName) extends Action
FacadeService <-[#green] Spring : It is Xs2aUpdateAuthorization service bean
Xs2aUpdateAuthorization [#green]-> Xs2aServices : Update context with users' input
end
Xs2aServices [#green]-> Xs2aServices : User input OK
Xs2aServices [#green]-> Xs2aServices : Switch to real execution mode
Xs2aServices [#green]-> ASPSP : Initiate consent
ASPSP [#green]-> Xs2aServices : Redirect authorization required
Xs2aServices [#green]-> Xs2aListAccountsEntrypoint : Redirect to ASPSP required
Xs2aListAccountsEntrypoint [#green]-> OutcomeMapper : Translate 'Redirect to ASPSP required'
OutcomeMapper [#green]-> Xs2aListAccountsEntrypoint : ContextBasedAuthorizationRequiredResult
Xs2aListAccountsEntrypoint [#green]-> FacadeService : ContextBasedAuthorizationRequiredResult
FacadeService [#green]-> ProtocolResultHandler : Translate FacadeStartAuthorizationResult -> FacadeRedirectResult
TppBankingApiAisController [#green]-> FacadeResponseMapper : translate FacadeRedirectResult
FacadeResponseMapper [#green]-> TppBankingApiAisController : This is 303 code with redirection to ASPSP authorization page
TppBankingApiAisController [#green]-> TppBackend : 303 Redirect to ASPSP
TppBackend [#green]-> User : 303 ASPSP 'Login page'

== User authorizes this request with ASPSP (redirect) ==
User [#orange]-> ASPSP : Authorization

== ASPSP reports consent authorization OK ==
ASPSP [#magenta]-> User : Done
ASPSP [#magenta]-> TppBackend : GET /from/aspsp/ok webhook
TppBackend [#magenta]-> ConsentServiceController : fromAspspOkUsingGET
ConsentServiceController [#magenta]-> FacadeService : Facade.execute()
FacadeService [#magenta]-> ServiceContextProvider : Create facade context from request
FacadeService <-[#magenta] ServiceContextProvider : ServiceContext
FacadeService [#magenta]-> ProtocolSelector : Select bank protocol by using authorization session id
ProtocolSelector [#magenta]-> Database : Read authorization session
Database [#magenta]-> ProtocolSelector: Bank protocol id from authorization session
ProtocolSelector [#magenta]-> FacadeService : BankProtocol
FacadeService [#magenta]-> Spring : Find bean - Bean(BankProtocol.protocolBeanName) extends Action
FacadeService <-[#magenta] Spring : It is Xs2aFromAspspRedirect service bean
Xs2aFromAspspRedirect [#magenta]-> Xs2aServices : Bank approved consent
Xs2aServices [#magenta]-> Database : Persist consent and its context
Xs2aServices [#magenta]-> Xs2aFromAspspRedirect : Consent acquired
Xs2aFromAspspRedirect [#magenta]-> OutcomeMapper : Translate 'Consent acquired'
OutcomeMapper [#magenta]-> Xs2aFromAspspRedirect : ConsentAcquiredResult
Xs2aFromAspspRedirect [#magenta]-> FacadeService : ConsentAcquiredResult
FacadeService [#magenta]-> ProtocolResultHandler : Translate ConsentAcquiredResult -> FacadeRedirectResult
TppBankingApiAisController [#magenta]-> FacadeResponseMapper : translate FacadeRedirectResult
FacadeResponseMapper [#magenta]-> TppBankingApiAisController : This is 303 code with redirection to FinTech
TppBankingApiAisController [#magenta]-> TppBackend : 303 Redirect to FinTech
TppBackend [#magenta]-> User : 303 FinTech 'Thanks for consent' page

== Fintech receives notification that consent is received ==
User [#orange]-> FinTech

== Fintech calls user account list within same session id ==

FinTech -> TppBackend : GET /accounts\n with <b>service session id</b> and Fintech user info, bank id, etc.
TppBackend -> TppBankingApiAisController : getAccounts
TppBankingApiAisController -> FacadeService : Facade.execute()
FacadeService -> ServiceContextProvider : Create facade context from request
FacadeService <- ServiceContextProvider : ServiceContext
FacadeService -> ProtocolSelector : Select bank protocol from request type and bank id
ProtocolSelector -> FacadeService : BankProtocol
FacadeService -> Spring : Find bean - Bean(BankProtocol.protocolBeanName) extends Action
FacadeService <- Spring : It is Xs2aListAccountsEntrypoint service bean
FacadeService -> Xs2aListAccountsEntrypoint : Xs2aListAccountsEntrypoint.execute(ServiceContext)
Xs2aListAccountsEntrypoint -> Database : Consent for service session
Xs2aListAccountsEntrypoint <- Database : Consent present, <b>consent context</b>
Xs2aServices -> Xs2aServices : Validate <b>consent context</b> -\ndo we have enough data (Mocked execution)
Xs2aServices -> ASPSP : Call ASPSP with consent using <b>consent context</b>
ASPSP -> Xs2aServices : Users' accounts
Xs2aServices -> OutcomeMapper : Translate ASPSP response
OutcomeMapper -> Xs2aResultBodyExtractor : Translate ASPSP response
Xs2aResultBodyExtractor -> OutcomeMapper : Account list
OutcomeMapper -> Xs2aListAccountsEntrypoint
Xs2aListAccountsEntrypoint -> FacadeService : SuccessResult<Account list>
Xs2aFromAspspRedirect -> FacadeService : SuccessResult<Account list>
FacadeService -> ProtocolResultHandler : Translate SuccessResult -> FacadeSuccessResult
ProtocolResultHandler -> TppBankingApiAisController : process FacadeSuccessResult
TppBankingApiAisController -> FacadeResponseMapper : translate FacadeSuccessResult
FacadeResponseMapper -> TppBankingApiAisController : This is 200 code with Account list body
TppBankingApiAisController -> TppBackend : 200 and Account list
TppBackend -> FinTech : 200 and Account list
@enduml
