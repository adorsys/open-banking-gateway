@startuml
actor FinTech
actor User
collections TppBackend
control TppBankingApiAisController
control ConsentServiceController
database Database
collections FacadeService

FinTech -> TppBackend : GET /accounts\n(Fintech user info, bank id, etc.)
TppBackend -> TppBankingApiAisController : getAccounts
TppBankingApiAisController -> FacadeService : Facade.execute()
FacadeService -> ServiceContextProvider : Create facade context from request
FacadeService <- ServiceContextProvider : ServiceContext
FacadeService -> ProtocolSelector : Select bank protocol from request type and bank id
ProtocolSelector -> FacadeService : BankProtocol
FacadeService -> Spring : Find bean - Bean(BankProtocol.protocolBeanName) extends Action
FacadeService <- Spring : It is Xs2aListAccountsEntrypoint service bean
FacadeService -> Xs2aListAccountsEntrypoint : Xs2aListAccountsEntrypoint.execute(ServiceContext)
Xs2aListAccountsEntrypoint -> Services
Services -> Database : Consent for service session
Services <- Database : No consent
Services -> Services : Validate API input -\ndo we have enough data (Mocked execution)
Services -> Xs2aListAccountsEntrypoint : User input has MissingParameters[]
Xs2aListAccountsEntrypoint -> OutcomeMapper : Translate 'User input has MissingParameters[]'
OutcomeMapper -> Xs2aListAccountsEntrypoint : ContextBasedValidationErrorResult
Xs2aListAccountsEntrypoint -> FacadeService : ContextBasedValidationErrorResult
FacadeService -> ProtocolResultHandler : Translate ContextBasedValidationErrorResult -> FacadeStartAuthorizationResult
ProtocolResultHandler -> Database : Authorization session present?
Database -> ProtocolResultHandler : No authorization session
ProtocolResultHandler -> Database : Create authorization session
ProtocolResultHandler -> TppBankingApiAisController : process FacadeStartAuthorizationResult
TppBankingApiAisController -> FacadeResponseMapper : translate FacadeStartAuthorizationResult
FacadeResponseMapper -> TppBankingApiAisController : This is 202 code with redirection to Embedded authorization
TppBankingApiAisController -> TppBackend : 202 Embedded authorization
TppBackend -> FinTech : 202 Embedded authorization
FinTech -> FinTech : Store <b>service session id</b>

FinTech -> User : Redirect user to\n'Embedded authorization'\nform using 'Location' header

User -> TppBackend : POST /consent/embedded\n(Consent valid until, which accounts, etc.)
TppBackend -> ConsentServiceController : embeddedUsingPOST
ConsentServiceController -> FacadeService : Facade.execute()
FacadeService -> ServiceContextProvider : Create facade context from request
FacadeService <- ServiceContextProvider : ServiceContext
FacadeService -> ProtocolSelector : Select bank protocol by using authorization session id
ProtocolSelector -> Database : Read authorization session
Database -> ProtocolSelector: Bank protocol id from authorization session
ProtocolSelector -> FacadeService : BankProtocol
FacadeService -> Spring : Find bean - Bean(BankProtocol.protocolBeanName) extends Action
FacadeService <- Spring : It is Xs2aUpdateAuthorization service bean
Xs2aUpdateAuthorization -> Services : Update context with users' input
Services -> Services : User input OK
Services -> Services : Switch to real execution mode
Services -> ASPSP : Initiate consent
ASPSP -> Services : Redirect authorization required
Services -> Xs2aListAccountsEntrypoint : Redirect to ASPSP required
Xs2aListAccountsEntrypoint -> OutcomeMapper : Translate 'Redirect to ASPSP required'
OutcomeMapper -> Xs2aListAccountsEntrypoint : ContextBasedAuthorizationRequiredResult
Xs2aListAccountsEntrypoint -> FacadeService : ContextBasedAuthorizationRequiredResult
FacadeService -> ProtocolResultHandler : Translate FacadeStartAuthorizationResult -> FacadeRedirectResult
TppBankingApiAisController -> FacadeResponseMapper : translate FacadeRedirectResult
FacadeResponseMapper -> TppBankingApiAisController : This is 303 code with redirection to ASPSP authorization page
TppBankingApiAisController -> TppBackend : 303 Redirect to ASPSP
TppBackend -> User : 303 ASPSP 'Login page'

User -> ASPSP : Authorization

ASPSP -> User : Done
ASPSP -> TppBackend : GET /from/aspsp/ok webhook
TppBackend -> ConsentServiceController : fromAspspOkUsingGET
ConsentServiceController -> FacadeService : Facade.execute()
FacadeService -> ServiceContextProvider : Create facade context from request
FacadeService <- ServiceContextProvider : ServiceContext
FacadeService -> ProtocolSelector : Select bank protocol by using authorization session id
ProtocolSelector -> Database : Read authorization session
Database -> ProtocolSelector: Bank protocol id from authorization session
ProtocolSelector -> FacadeService : BankProtocol
FacadeService -> Spring : Find bean - Bean(BankProtocol.protocolBeanName) extends Action
FacadeService <- Spring : It is Xs2aFromAspspRedirect service bean
Xs2aFromAspspRedirect -> Services : Bank approved consent
Services -> Database : Persist consent and its context
Services -> Xs2aFromAspspRedirect : Consent acquired
Xs2aFromAspspRedirect -> OutcomeMapper : Translate 'Consent acquired'
OutcomeMapper -> Xs2aFromAspspRedirect : ConsentAcquiredResult
Xs2aFromAspspRedirect -> FacadeService : ConsentAcquiredResult
FacadeService -> ProtocolResultHandler : Translate ConsentAcquiredResult -> FacadeRedirectResult
TppBankingApiAisController -> FacadeResponseMapper : translate FacadeRedirectResult
FacadeResponseMapper -> TppBankingApiAisController : This is 303 code with redirection to FinTech
TppBankingApiAisController -> TppBackend : 303 Redirect to FinTech
TppBackend -> User : 303 FinTech 'Thanks for consent' page
User -> FinTech

FinTech -> TppBackend : GET /accounts\n with <b>service session id</b> and Fintech user info, bank id, etc.
TppBackend -> TppBankingApiAisController : getAccounts
TppBankingApiAisController -> FacadeService : Facade.execute()
FacadeService -> ServiceContextProvider : Create facade context from request
FacadeService <- ServiceContextProvider : ServiceContext
FacadeService -> ProtocolSelector : Select bank protocol from request type and bank id
ProtocolSelector -> FacadeService : BankProtocol
FacadeService -> Spring : Find bean - Bean(BankProtocol.protocolBeanName) extends Action
FacadeService <- Spring : It is Xs2aListAccountsEntrypoint service bean
FacadeService -> Xs2aListAccountsEntrypoint : Xs2aListAccountsEntrypoint.execute(ServiceContext)
Xs2aListAccountsEntrypoint -> Database : Consent for service session
Xs2aListAccountsEntrypoint <- Database : Consent present, <b>consent context</b>
Services -> Services : Validate <b>consent context</b> -\ndo we have enough data (Mocked execution)
Services -> ASPSP : Call ASPSP with consent using <b>consent context</b>
ASPSP -> Services : Users' accounts
Services -> OutcomeMapper : Translate ASPSP response
OutcomeMapper -> Xs2aResultBodyExtractor : Translate ASPSP response
Xs2aResultBodyExtractor -> OutcomeMapper : Account list
OutcomeMapper -> Xs2aListAccountsEntrypoint
Xs2aListAccountsEntrypoint -> FacadeService : SuccessResult<Account list>
Xs2aFromAspspRedirect -> FacadeService : SuccessResult<Account list>
FacadeService -> ProtocolResultHandler : Translate SuccessResult -> FacadeSuccessResult
ProtocolResultHandler -> TppBankingApiAisController : process FacadeSuccessResult
TppBankingApiAisController -> FacadeResponseMapper : translate FacadeSuccessResult
FacadeResponseMapper -> TppBankingApiAisController : This is 200 code with Account list body
TppBankingApiAisController -> TppBackend : 200 and Account list
TppBackend -> FinTech : 200 and Account list
@enduml
