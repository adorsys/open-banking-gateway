server:
  port: 8080

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/open_banking?currentSchema=banking_protocol
    username: postgres
    password: docker
    type: com.zaxxer.hikari.HikariDataSource
    driver-class-name: org.postgresql.Driver
    hikari:
      schema: banking_protocol
  jpa:
    hibernate:
      naming:
        physical-strategy: de.adorsys.opba.db.hibernate.PrefixAndSnakeCasePhysicalNamingStrategy
      # DDL is handled by Liquibase
      ddl-auto: validate
    open-in-view: false
  liquibase:
    enabled: true
    change-log: classpath:migration/master.xml
    parameters:
      table-prefix: opb_
      fill-with-mock-data: true

protocol:
  xs2a:
    urls:
      redirect:
        ais:
          to-aspsp: ${facade.urls.embedded-ui-base-url}/ais/#{context.getAuthorizationSessionIdIfOpened()}/to-aspsp-redirection
          consent-accounts:
            ok:  ${facade.urls.embedded-ui-base-url}/embedded-server/v1/consent/#{context.getAuthorizationSessionIdIfOpened()}/fromAspsp/STUB_STATE/ok?redirectCode=#{context.getAspspRedirectCode()}
            nok: ${facade.urls.embedded-ui-base-url}/embedded-server/v1/consent/#{context.getAuthorizationSessionIdIfOpened()}/fromAspsp/STUB_STATE/nok?redirectCode=#{context.getAspspRedirectCode()}
            result: ${facade.urls.embedded-ui-base-url}/ais/#{context.getAuthorizationSessionIdIfOpened()}/consent-result?redirectCode=#{context.getRedirectCodeIfAuthContinued()}
          parameters:
            max-array-size: 32
            provide-more: ${facade.urls.embedded-ui-base-url}/ais/#{context.getAuthorizationSessionIdIfOpened()}?redirectCode=#{context.getRedirectCodeIfAuthContinued()}
            provide-psu-password: ${facade.urls.embedded-ui-base-url}/ais/#{context.getAuthorizationSessionIdIfOpened()}/authenticate?wrong=#{context.getWrongAuthCredentials()}
            select-sca-method: ${facade.urls.embedded-ui-base-url}/ais/#{context.getAuthorizationSessionIdIfOpened()}/select-sca-method
            report-sca-result: ${facade.urls.embedded-ui-base-url}/ais/#{context.getAuthorizationSessionIdIfOpened()}/sca-result?wrong=#{context.getWrongAuthCredentials()}
            provide-psu-iban: ${facade.urls.embedded-ui-base-url}/ais/#{context.getAuthorizationSessionIdIfOpened()}/entry-consent-transactions/dedicated-account-access?wrong=#{context.getWrongAuthCredentials()}
        pis:
          to-aspsp: ${facade.urls.embedded-ui-base-url}/pis/#{context.getAuthorizationSessionIdIfOpened()}/to-aspsp-redirection
          payments:
            ok:  ${facade.urls.embedded-ui-base-url}/pis/#{context.getAuthorizationSessionIdIfOpened()}/fromAspsp/STUB_STATE/ok?redirectCode=#{context.getAspspRedirectCode()}
            nok: ${facade.urls.embedded-ui-base-url}/pis/#{context.getAuthorizationSessionIdIfOpened()}/fromAspsp/STUB_STATE/nok?redirectCode=#{context.getAspspRedirectCode()}
            result: ${facade.urls.embedded-ui-base-url}/pis/#{context.getAuthorizationSessionIdIfOpened()}/consent-result?redirectCode=#{context.getRedirectCodeIfAuthContinued()}
    aspspmessages:
      invalid-credentials: PSU_CREDENTIALS_INVALID
      invalid-consent: FORMAT_ERROR
    pkcs12:
      keystore: sample-qwac.keystore
      password: password

# Flowable comes for all protocols shared
bpmnshared:
  flowable:
    serialization:
      serialize-only-packages:
        - de.adorsys.opba.protocol.bpmnshared.dto.context
        - de.adorsys.opba.protocol.xs2a.context
        - de.adorsys.opba.protocol.hbci.context
    expirable:
      expire-after-write: PT600S
flowable:
  process-definition-location-prefix: classpath*:/processes/**/
