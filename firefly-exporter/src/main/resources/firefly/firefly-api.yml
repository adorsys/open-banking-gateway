openapi: 3.0.0
servers:
  - description: Firefly III demo site
    url: https://demo.firefly-iii.org/
info:
  title: Firefly III API
  description: |
    This is the official documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. This version of the API is live from version v4.7.9 and onwards. You may use the "Authorize" button to try the API below.
  version: "1.3.0"
  contact:
    name: James Cole
    email: james@firefly-iii.org
    url: https://firefly-iii.org
  license:
    name: AGPLv3
    url: 'https://www.gnu.org/licenses/agpl-3.0.en.html'
tags:
  - name: about
    description: General system information, versions, and the currently logged in user.
  - name: accounts
    description: All asset, expense and other accounts (and the metadata) together with
      related transactions, piggy banks and other objects.
  - name: attachments
    description: All attachments of the authenticated user, including up- and downloading
      of the files.
  - name: available_budgets
    description: The total available amount that is available for budgeting every period.
  - name: bills
    description: All bills by the user.
  - name: budgets
    description: Manage all the user&#039;s budgets
  - name: charts
    description: This endpoint delivers optimised data for charts and graphics.
  - name: categories
    description: Manage all the user&#039;s categories
  - name: currency_exchange_rates
    description: Manage system currency exchange rates, add your own rates or read them
      from providers configured in Firefly III
  - name: configuration
    description: Manage the global Firefly III configuration
  - name: currencies
    description: Manage all currencies in the system, disable and enable them or add
      new ones.
  - name: import
    description: Manage and run imports.
  - name: links
    description: Manage links between transactions, and manage the type of links available.
  - name: piggy_banks
    description: Control all of the user&#039;s piggy banks, including money management
  - name: preferences
    description: Manage the user&#039;s preferences, including some hidden ones.
  - name: recurrences
    description: Manage the user&#039;s recurring transactions, trigger the creation of transactions
      and manage the settings.
  - name: rules
    description: Manage all of the user&#039;s rules and trigger the execution of rules.
  - name: rule_groups
    description: Manage all of the user&#039;s groups of rules and trigger the execution
      of entire groups.
  - name: search
    description: Search through the user&#039;s financial data.
  - name: summary
    description: Endpoint for sums, lists of numbers and other processed information.
  - name: tags
    description: Manage all the user&#039;s tags.
  - name: transactions
    description: Manage all the user&#039;s transactions.
  - name: users
    description: Manage the users registered within Firefly III.

paths:
  /api/v1/about:
    get:
      tags:
        - about
      operationId: getAbout
      summary: System information end point.
      description: |
        Returns general system information and versions of the (supporting) software.
      responses:
        '200':
          description: The available system information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfo'
  /api/v1/about/user:
    get:
      tags:
        - about
      summary: Currently authenticated user endpoint.
      operationId: getCurrentUser
      description: |
        Returns the currently authenticated user.
      responses:
        '200':
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingle'
  /api/v1/accounts:
    get:
      tags:
        - accounts
      summary: List all accounts.
      description: |
        This endpoint returns a list of all the accounts owned by the authenticated user.
      operationId: listAccount
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is per 50 items.
          required: false
          schema:
            type: integer
            format: int32
            example: 1
        - in: query
          name: date
          description: |
            A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account's balance on that day.
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: type
          description: Optional filter on the account type(s) returned
          required: false
          schema:
            $ref: '#/components/schemas/AccountTypeFilter'
      responses:
        '200':
          description: A list of accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountArray'
    post:
      tags:
        - accounts
      summary: Create new account.
      operationId: storeAccount
      description: Creates a new account. The data required can be submitted as a JSON body or as a list of parameters (in key=value pairs, like a webform).
      responses:
        '200':
          description: 'New account stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Account'
        description: JSON array with the necessary account information or key=value pairs. See the model for the exact specifications.
        required: true
  /api/v1/accounts/{id}:
    get:
      tags:
        - accounts
      summary: Get single account.
      description: |
        Returns a single account by its ID.
      operationId: getAccount
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the account.
        - in: query
          name: date
          description: |
            A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account's balance on that day.
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: 'The requested account'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSingle'
        '404':
          description: Account not found
    put:
      summary: Update existing account.
      description: |
        Used to update a single account. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory.
      operationId: updateAccount
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the account.
      tags:
        - accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Account'
        description: JSON array or formdata with updated account information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated account stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      summary: Permanently delete account.
      description: |
        Will permanently delete an account. Any associated transactions and piggy banks are ALSO deleted. Cannot be recovered from.
      operationId: deleteAccount
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the account.
      tags:
        - accounts
      responses:
        '204':
          description: Account deleted
        '404':
          description: No such account
  /api/v1/accounts/{id}/piggy_banks:
    get:
      tags:
        - accounts
      summary: List all piggy banks related to the account.
      description: |
        This endpoint returns a list of all the piggy banks connected to the account.
      operationId: listPiggyBankByAccount
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the account.
        - in: query
          name: page
          description: Page number. The default pagination is per 50 items.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A list of piggy banks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggyBankArray'
  /api/v1/accounts/{id}/transactions:
    get:
      tags:
        - accounts
      summary: List all transactions related to the account.
      description: |
        This endpoint returns a list of all the transactions connected to the account.
      operationId: listTransactionByAccount
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the account.
        - in: query
          name: page
          description: Page number. The default pagination is per 50 items.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: limit
          description: Limits the number of results on one page.
          required: false
          schema:
            type: integer
            example: 5
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: type
          description: Optional filter on the transaction type(s) returned.
          required: false
          schema:
            $ref: '#/components/schemas/TransactionTypeFilter'
      responses:
        '200':
          description: A list of transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
  /api/v1/accounts/{id}/attachments:
    get:
      summary: Lists all attachments.
      description: Lists all attachments.
      operationId: listAttachmentByAccount
      tags:
        - accounts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the account.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of attachments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
        '404':
          description: No such account.
  /api/v1/attachments:
    get:
      summary: List all attachments.
      description: |
        This endpoint lists all attachments.
      operationId: listAttachment
      tags:
        - attachments
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of attachments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
    post:
      summary: Store a new attachment.
      description: |
        Creates a new attachment. The data required can be submitted as a JSON body or as a list of parameters. You cannot use this endpoint to upload the actual file data (see below). This endpoint only creates the attachment object.
      operationId: storeAttachment
      tags:
        - attachments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attachment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Attachment'
        description: "JSON array or key=value pairs with the necessary attachment information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'New attachment stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/attachments/{id}:
    get:
      summary: Get a single attachment.
      description: |
        Get a single attachment. This endpoint only returns the available metadata for the attachment. Actual file data is handled in two other endpoints (see below).
      operationId: getAttachment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the attachment.
      tags:
        - attachments
      responses:
        '200':
          description: 'The requested attachment'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentSingle'
        '404':
          description: Attachment not found
    put:
      operationId: updateAttachment
      tags:
        - attachments
      summary: Update existing attachment.
      description: |
        Update the meta data for an existing attachment. This endpoint does not allow you to upload or download data. For that, see below.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the attachment.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attachment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Attachment'
        description: JSON array with updated attachment information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated attachment stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      operationId: deleteAttachment
      summary: Delete an attachment.
      description: |
        With this endpoint you delete an attachment, including any stored file data.
      tags:
        - attachments
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the single.
      responses:
        '204':
          description: Attachment deleted.
        '404':
          description: No such attachment
  /api/v1/attachments/{id}/download:
    get:
      summary: Download a single attachment.
      description: |
        This endpoint allows you to download the binary content of a transaction. It will be sent to you as a download, using the content type "application/octet-stream" and content disposition "attachment; filename=example.pdf".
      operationId: downloadAttachment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the attachment.
      tags:
        - attachments
      responses:
        '200':
          description: 'The requested attachment'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found
  /api/v1/attachments/{id}/upload:
    post:
      summary: Upload an attachment.
      description: |
        Use this endpoint to upload (and possible overwrite) the file contents of an attachment. Simply put the entire file in the body as binary data.
      operationId: uploadAttachment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the attachment.
      tags:
        - attachments
      responses:
        '204':
          description: 'Upload was a success'
        '404':
          description: File not found
        '422':
          description: Upload invalid or empty file.
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /api/v1/available_budgets:
    get:
      summary: List all available budget amounts.
      description: |
        Firefly III allows users to set the amount that is available to be budgeted in so-called "available budgets". For example, the user could have 1200,- available to be divided during the coming month. This amount is used on the /budgets page. This endpoint returns all of these amounts and the periods for which they are set.
      operationId: listAvailableBudget
      tags:
        - available_budgets
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD.
          required: false
          schema:
            type: string
            format: date
            example: 2018-12-31
      responses:
        '200':
          description: A list of available budget amounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableBudgetArray'
    post:
      summary: Store a new available budget
      description: |
        Creates a new available budget for a specified period. The data required can be submitted as a JSON body or as a list of parameters.
      operationId: storeAvailableBudget
      tags:
        - available_budgets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailableBudget'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AvailableBudget'
        description: "JSON array or key=value pairs with the necessary available budget information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'New available budget stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableBudgetSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/available_budgets/{id}:
    get:
      summary: Get a single available budget.
      description: Get a single available budget, by ID.
      operationId: getAvailableBudget
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the available budget.
      tags:
        - available_budgets
      responses:
        '200':
          description: 'The requested available budget'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableBudgetSingle'
        '404':
          description: AvailableBudget not found
    put:
      operationId: updateAvailableBudget
      tags:
        - available_budgets
      description: Update existing available budget.
      summary: Update existing available budget, to change for example the date range of the amount or the amount itself.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the object.X
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvailableBudget'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AvailableBudget'
        description: JSON array or form value with updated available budget information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated available budget stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableBudgetSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      operationId: deleteAvailableBudget
      description: Delete an available budget. Not much more to say.
      summary: Delete an available budget.
      tags:
        - available_budgets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the available budget.
      responses:
        '204':
          description: Available budget deleted.
        '404':
          description: No such available budget.

  /api/v1/bills:
    get:
      summary: List all bills.
      description: This endpoint will list all the user's bills.
      operationId: listBill
      tags:
        - bills
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD. If it is are added to the request, Firefly III will calculate the appropriate payment and paid dates.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD. If it is added to the request, Firefly III will calculate the appropriate payment and paid dates.
          required: false
          schema:
            type: string
            format: date
            example: 2018-12-31
      responses:
        '200':
          description: A list of bills
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillArray'
    post:
      summary: Store a new bill
      description: Creates a new bill. The data required can be submitted as a JSON body or as a list of parameters.
      operationId: storeBill
      tags:
        - bills
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Bill'
        description: "JSON array or key=value pairs with the necessary bill information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'New bill stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/bills/{id}:
    get:
      summary: Get a single bill.
      description: Get a single bill.
      operationId: getBill
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the bill.
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD. If it is are added to the request, Firefly III will calculate the appropriate payment and paid dates.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD. If it is added to the request, Firefly III will calculate the appropriate payment and paid dates.
          required: false
          schema:
            type: string
            format: date
            example: 2018-12-31
      tags:
        - bills
      responses:
        '200':
          description: 'The requested bill'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillSingle'
        '404':
          description: Bill not found
    put:
      operationId: updateBill
      tags:
        - bills
      description: Update existing bill.
      summary: Update existing bill.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the bill.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Bill'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Bill'
        description: JSON array or key=value pairs with updated bill information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated bill stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      operationId: deleteBill
      description: Delete a bill. This will not delete any associated rules. Will not remove associated transactions. WILL remove all associated attachments.
      summary: Delete a bill.
      tags:
        - bills
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the bill.
      responses:
        '204':
          description: Bill deleted.
        '404':
          description: No such bill
  /api/v1/bills/{id}/attachments:
    get:
      summary: List all attachments uploaded to the bill.
      description: This endpoint will list all attachments linked to the bill.
      operationId: listAttachmentByBill
      tags:
        - bills
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the bill.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of attachments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
  /api/v1/bills/{id}/rules:
    get:
      summary: List all rules associated with the bill.
      description: This endpoint will list all rules that have an action to set the bill to this bill.
      operationId: listRuleByBill
      tags:
        - bills
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the bill.
      responses:
        '200':
          description: A list of rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleArray'
  /api/v1/bills/{id}/transactions:
    get:
      summary: List all transactions associated with the  bill.
      description: This endpoint will list all transactions linked to this bill.
      operationId: listTransactionByBill
      tags:
        - bills
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the bill.
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD.
          required: false
          schema:
            type: string
            format: date
            example: 2018-12-31
        - in: query
          name: type
          description: Optional filter on the transaction type(s) returned
          required: false
          schema:
            $ref: '#/components/schemas/TransactionTypeFilter'
      responses:
        '200':
          description: A list of transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'

  /api/v1/budgets:
    get:
      summary: List all budgets.
      description: List all the budgets the user has made. If the start date and end date are submitted as well, the "spent" array will be updated accordingly.
      operationId: listBudget
      tags:
        - budgets
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD, to get info on how much the user has spent. You must submit both start and end.
          required: false
          schema:
            type: string
            format: date
            example: 2018-12-31
      responses:
        '200':
          description: A list of budgets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetArray'
    post:
      summary: Store a new budget
      description: Creates a new budget. The data required can be submitted as a JSON body or as a list of parameters.
      operationId: storeBudget
      tags:
        - budgets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Budget'
        description: "JSON array or key=value pairs with the necessary budget information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'New budget stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/budgets/{id}:
    get:
      summary: Get a single budget.
      description: Get a single budget. If the start date and end date are submitted as well, the "spent" array will be updated accordingly.
      operationId: getBudget
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the requested budget.
        - in: query
          name: start_date
          description: |
            A date formatted YYYY-MM-DD, to get info on how much the user has spent.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end_date
          description: |
            A date formatted YYYY-MM-DD, to get info on how much the user has spent.
          required: false
          schema:
            type: string
            format: date
            example: 2018-12-31
      tags:
        - budgets
      responses:
        '200':
          description: 'The requested budget'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetSingle'
        '404':
          description: Budget not found.
    put:
      operationId: updateBudget
      tags:
        - budgets
      description: Update existing budget. This endpoint cannot be used to set budget amount limits.
      summary: Update existing budget.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
            example: 1
          description: The ID of the budget.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Budget'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Budget'
        description: JSON array with updated budget information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated budget stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      operationId: deleteBudget
      description: Delete a budget. Transactions will not be deleted.
      summary: Delete a budget.
      tags:
        - budgets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
            example: 1
          description: The ID of the budget.
      responses:
        '204':
          description: Budget deleted.
        '404':
          description: No such budget

  /api/v1/budgets/{id}/transactions:
    get:
      summary: All transactions to a budget.
      description: Get all transactions linked to a budget, possibly limited by start and end
      operationId: listTransactionByBudget
      tags:
        - budgets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the budget.
        - in: query
          name: limit
          description: Limits the number of results on one page.
          required: false
          schema:
            type: integer
            example: 5
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD.
          required: false
          schema:
            type: string
            format: date
            example: 2018-12-31
        - in: query
          name: type
          description: Optional filter on the transaction type(s) returned
          required: false
          schema:
            $ref: '#/components/schemas/TransactionTypeFilter'
      responses:
        '200':
          description: A list of transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
  /api/v1/budgets/{id}/limits:
    get:
      operationId: listBudgetLimitByBudget
      description: |
        Get all budget limits for this budget and the money spent, and money left. You can limit the list by submitting a date range as well. The "spent" array for each budget limit is NOT influenced by the start and end date of your query, but by the start and end date of the budget limit itself.
      summary: Get all limits
      tags:
        - budgets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
            example: 1
          description: The ID of the requested budget.
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD.
          required: false
          schema:
            type: string
            format: date
            example: 2018-12-31
      responses:
        '200':
          description: A list of budget limits applicable to this budget.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetLimitArray'
    post:
      operationId: storeBudgetLimit
      description: Store a new budget limit.
      summary: Store new budget limit.
      tags:
        - budgets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
            example: 1
          description: The ID of the budget.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetLimit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BudgetLimit'
        description: "JSON array or key=value pairs with the necessary budget information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'New budget limit stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetLimitSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/budgets/limits/{id}:
    get:
      summary: Get single budget limit.
      operationId: getBudgetLimit
      tags:
        - budgets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
            example: 1
          description: The ID of the requested budget limit.
      responses:
        '200':
          description: 'The requested budget limit'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetLimitSingle'
        '404':
          description: Budget limit not found.
    put:
      operationId: updateBudgetLimit
      tags:
        - budgets
      description: Update existing budget limit.
      summary: Update existing budget limit.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
            example: 1
          description: The ID of the requested budget limit. The budget limit MUST be associated to the budget ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetLimit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BudgetLimit'
        description: JSON array with updated budget limit information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated budget limit stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetLimitSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      operationId: deleteBudgetLimit
      description: Delete a budget limit.
      summary: Delete a budget limit.
      tags:
        - budgets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
            example: 1
          description: The ID of the requested budget limit.
      responses:
        '204':
          description: Budget limit deleted.
        '404':
          description: No such budget limit
  /api/v1/budgets/limits/{id}/transactions:
    get:
      summary: List all transactions by a budget limit ID.
      description: List all the transactions within one budget limit. The start and end date are dictated by the budget limit.
      operationId: listTransactionByBudgetLimit
      tags:
        - budgets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
            example: 1
          description: The ID of the requested budget limit.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: type
          description: Optional filter on the transaction type(s) returned
          required: false
          schema:
            $ref: '#/components/schemas/TransactionTypeFilter'
      responses:
        '200':
          description: A list of transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
  /api/v1/budgets/{id}/attachments:
    get:
      summary: Lists all attachments.
      description: Lists all attachments.
      operationId: listAttachmentByBudget
      tags:
        - budgets
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the budget.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of attachments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
        '404':
          description: No such budget.

  /api/v1/categories:
    get:
      summary: List all categories.
      description: List all categories.
      operationId: listCategory
      tags:
        - categories
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryArray'
    post:
      summary: Store a new category
      description: Creates a new category. The data required can be submitted as a JSON body or as a list of parameters.
      operationId: storeCategory
      tags:
        - categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
        description: "JSON array or key=value pairs with the necessary category information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'New category stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategorySingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/categories/{id}:
    get:
      summary: Get a single category.
      description: Get a single category.
      operationId: getCategory
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the category.
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD, to show spent and earned info.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD, to show spent and earned info.
          required: false
          schema:
            type: string
            format: date
            example: 2018-12-31
      tags:
        - categories
      responses:
        '200':
          description: 'The requested category'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategorySingle'
        '404':
          description: Category not found
    put:
      operationId: updateCategory
      tags:
        - categories
      description: Update existing category.
      summary: Update existing category.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the category.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
        description: JSON array with updated category information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated category stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategorySingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      operationId: deleteCategory
      description: Delete a category. Transactions will not be removed.
      summary: Delete a category.
      tags:
        - categories
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the category.
      responses:
        '204':
          description: Category deleted.
        '404':
          description: No such category.
  /api/v1/categories/{id}/transactions:
    get:
      summary: List all transactions in a category.
      description: List all transactions in a category, optionally limited to the date ranges specified.
      operationId: listTransactionByCategory
      tags:
        - categories
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the category.
        - in: query
          name: page
          description: Page number. The default pagination is per 50.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD, to limit the result list.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD, to limit the result list.
          required: false
          schema:
            type: string
            format: date
            example: 2018-12-31
        - in: query
          name: type
          description: Optional filter on the transaction type(s) returned
          required: false
          schema:
            $ref: '#/components/schemas/TransactionTypeFilter'
      responses:
        '200':
          description: A list of transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
  /api/v1/categories/{id}/attachments:
    get:
      summary: Lists all attachments.
      description: Lists all attachments.
      operationId: listAttachmentByCategory
      tags:
        - categories
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the category.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of attachments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
        '404':
          description: No such category.

  /api/v1/cer:
    get:
      summary: Get an exchange rate.
      description: Get an exchange rate. If Firefly III doesn't know the rate it will set the rate to 1.0.
      operationId: getExchangeRate
      tags:
        - currency_exchange_rates
      parameters:
        - in: query
          name: from
          required: false
          schema:
            type: string
            format: string
            example: EUR
          description: The source currency code. If omitted, defaults to EUR.
        - in: query
          name: to
          required: false
          schema:
            type: string
            format: string
            example: USD
          description: The destination currency code. If omitted, defaults to USD.
        - in: query
          name: date
          required: false
          schema:
            type: string
            format: date
            example: "2018-09-17"
          description: The date you want to know the exchange rate on.
        - in: query
          name: amount
          required: false
          schema:
            type: number
            format: double
            example: 120.12
          description: The amount in the source currency. If added, Firefly III will calculate the amount in the destination currency.
      responses:
        '200':
          description: The exchange rate as requested
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeRate'
  /api/v1/chart/ab/overview/{id}:
    get:
      tags:
        - charts
      summary: Dashboard chart with an overview of the available budget.
      description: |
        This endpoint returns the data required to generate a pie chart for the available budget.
      operationId: getChartABOverview
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the available budget.
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD.
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD.
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Pie chart oriented chart information. Check out the model for more details. Each entry is a piece of the pie in the chart.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartLine'

  /api/v1/chart/account/overview:
    get:
      tags:
        - charts
      summary: Dashboard chart with asset account balance information.
      description: |
        This endpoint returns the data required to generate a chart with basic asset account balance information.
      operationId: getChartAccountOverview
      parameters:
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD.
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD.
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Line chart oriented chart information. Check out the model for more details. Each entry is a line (or bar) in the chart.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartLine'
  /api/v1/chart/account/expense:
    get:
      tags:
        - charts
      summary: Dashboard chart with expense account balance information.
      description: |
        This endpoint returns the data required to generate a chart that shows the user how much they've spent on their expense accounts.
      operationId: getChartAccountExpense
      parameters:
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD.
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD.
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Bar chart oriented chart information. Check out the model for more details. Each entry is a line (or bar) in the chart.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartBar'
  /api/v1/chart/account/revenue:
    get:
      tags:
        - charts
      summary: Dashboard chart with revenue account balance information.
      description: |
        This endpoint returns the data required to generate a chart that shows the user how much they've earned from their revenue accounts.
      operationId: getChartAccountRevenue
      parameters:
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD.
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD.
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Bar chart oriented chart information. Check out the model for more details. Each entry is a line (or bar) in the chart.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartBar'

  /api/v1/chart/category/overview:
    get:
      tags:
        - charts
      summary: Dashboard chart with an overview of the users categories.
      description: |
        This endpoint returns the data required to generate a bar chart for the expenses and incomes on the users categories.
      operationId: getChartCategoryOverview
      parameters:
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD.
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD.
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Bar chart oriented chart information. Check out the model for more details. Each entry is a set of bars in the chart.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartLine'

  /api/v1/configuration:
    get:
      summary: Get Firefly III system configuration.
      description: Get system configuration
      operationId: getConfiguration
      tags:
        - configuration
      responses:
        '200':
          description: System configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
  /api/v1/configuration/{name}:
    post:
      tags:
        - configuration
      summary: Update configuration
      operationId: setConfiguration
      description: Set a single config value.
      parameters:
        - in: path
          name: name
          description: The configuration value name.
          required: true
          schema:
            type: string
            format: string
            example: "single_user_mode"
            enum:
              - is_demo_site
              - last_update_check
              - single_user_mode
      responses:
        '200':
          description: 'New config stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      requestBody:
        description: JSON array with the necessary account information or key=value pairs. See the model for the exact specifications.
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ConfigurationUpdate'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigurationUpdate'
        required: true

  /api/v1/currencies:
    get:
      summary: List all currencies.
      description: List all currencies.
      operationId: listCurrency
      tags:
        - currencies
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of currencies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyArray'
    post:
      summary: Store a new currency
      description: Creates a new currency. The data required can be submitted as a JSON body or as a list of parameters.
      operationId: storeCurrency
      tags:
        - currencies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Currency'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Currency'
        description: "JSON array or key=value pairs with the necessary currency information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'New currency stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencySingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/currencies/{code}/enable:
    post:
      summary: Enable a single currency.
      description: Enable a single currency.
      operationId: enableCurrency
      tags:
        - currencies
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: string
            example: USD
          description: The currency code.
      responses:
        '204':
          description: Currency was enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencySingle'
  /api/v1/currencies/{code}/disable:
    post:
      summary: Disable a currency.
      description: Disable a currency.
      operationId: disableCurrency
      tags:
        - currencies
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: integer
            example: GBP
          description: The currency code.
      responses:
        '204':
          description: Currency was disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencySingle'
        '409':
          description: Currency cannot be disabled, because it is still in use.
  /api/v1/currencies/{code}/default:
    post:
      summary: Make currency default currency.
      description: Make this currency the default currency. If the currency is not enabled, it will be enabled as well.
      operationId: defaultCurrency
      tags:
        - currencies
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: string
            example: USD
          description: The currency code.
      responses:
        '204':
          description: Currency has been made the default currency.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencySingle'
  /api/v1/currencies/{code}:
    get:
      summary: Get a single currency.
      description: Get a single currency.
      operationId: getCurrency
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: string
            example: USD
          description: The currency code.
      tags:
        - currencies
      responses:
        '200':
          description: 'The requested currency'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencySingle'
        '404':
          description: Currency not found
    put:
      operationId: updateCurrency
      tags:
        - currencies
      description: Update existing currency.
      summary: Update existing currency.
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: string
            example: EUR
          description: The currency code.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Currency'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Currency'
        description: JSON array with updated currency information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated currency stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencySingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      operationId: deleteCurrency
      description: Delete a currency.
      summary: Delete a currency.
      tags:
        - currencies
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: string
            example: GBP
          description: The currency code.
      responses:
        '204':
          description: Currency deleted.
        '404':
          description: No such currency
  /api/v1/currencies/{code}/accounts:
    get:
      summary: List all accounts with this currency.
      description: List all accounts with this currency.
      operationId: listAccountByCurrency
      tags:
        - currencies
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: string
            example: USD
          description: The currency code.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: date
          description: |
            A date formatted YYYY-MM-DD. When added to the request, Firefly III will show the account's balance on that day.
          required: false
          schema:
            type: string
            format: string
        - in: query
          name: type
          description: Optional filter on the account type(s) returned
          required: false
          schema:
            $ref: '#/components/schemas/AccountTypeFilter'
      responses:
        '200':
          description: A list of accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountArray'
  /api/v1/currencies/{code}/available_budgets:
    get:
      summary: List all available budgets with this currency.
      description: List all available budgets with this currency.
      operationId: listAvailableBudgetByCurrency
      tags:
        - currencies
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: string
            example: EUR
          description: The currency code.
        - in: query
          name: page
          description: Page number. The default pagination is 50
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of available budgets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableBudgetArray'
  /api/v1/currencies/{code}/bills:
    get:
      summary: List all bills with this currency.
      description: List all bills with this currency.
      operationId: listBillByCurrency
      tags:
        - currencies
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: string
            example: USD
          description: The currency code.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of bills.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillArray'
  /api/v1/currencies/{code}/budget_limits:
    get:
      summary: List all budget limits with this currency
      description: List all budget limits with this currency
      operationId: listBudgetLimitByCurrency
      tags:
        - currencies
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: string
            example: USD
          description: The currency code.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: start
          description: Start date for the budget limit list.
          required: false
          schema:
            type: string
            format: date
            example: "2018-01-01"
        - in: query
          name: end
          description: End date for the budget limit list.
          required: false
          schema:
            type: string
            format: date
            example: "2018-01-31"
      responses:
        '200':
          description: A list of budget limits.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetLimitArray'
  /api/v1/currencies/{code}/cer:
    get:
      summary: List all known exchange rates with (from or to) this currency.
      description: List all known exchange rates.
      operationId: listExchangeRateByCurrency
      tags:
        - currencies
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: string
            example: GBP
          description: The currency code.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: date
          description: |
            The date of which you want to know the exchange rate
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: start
          description: |
            Use this instead of the date parameter to search for a range of currency exchange values.
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: end
          description: |
            Use this instead of the date parameter to search for a range of currency exchange values.
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A list of exchange rates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeRateArray'
  /api/v1/currencies/{code}/recurrences:
    get:
      summary: List all recurring transactions with this currency.
      description: List all recurring transactions with this currency.
      operationId: listRecurrenceByCurrency
      tags:
        - currencies
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: string
            example: EUR
          description: The currency code.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of recurring transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurrenceArray'
  /api/v1/currencies/{code}/rules:
    get:
      summary: List all rules with this currency.
      description: List all rules with this currency.
      operationId: listRuleByCurrency
      tags:
        - currencies
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: string
            example: USD
          description: The currency code.
        - in: query
          name: page
          description: Page number. The default pagination per 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleArray'
  /api/v1/currencies/{code}/transactions:
    get:
      summary: List all transactions with this currency.
      description: List all transactions with this currency.
      operationId: listTransactionByCurrency
      tags:
        - currencies
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: string
            example: USD
          description: The currency code.
        - in: query
          name: page
          description: Page number. The default pagination is per 50.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: start_date
          description: |
            A date formatted YYYY-MM-DD, to limit the list of transactions.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end_date
          description: |
            A date formatted YYYY-MM-DD, to limit the list of transactions.
          required: false
          schema:
            type: string
            format: date
            example: 2018-12-31
        - in: query
          name: type
          description: Optional filter on the transaction type(s) returned
          required: false
          schema:
            $ref: '#/components/schemas/TransactionTypeFilter'
      responses:
        '200':
          description: A list of transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
  /api/v1/currencies/default:
    get:
      summary: Get the user's default currency.
      description: Get the user's default currency.
      operationId: getDefaultCurrency
      tags:
        - currencies
      responses:
        '200':
          description: 'The default currency'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencySingle'

  /api/v1/data/destroy:
    delete:
      tags:
        - data
      operationId: destroyData
      summary: Endpoint to destroy user data
      description: |
        A call to this endpoint permanently destroys the requested data type. Use it with care and always with user permission.
        The demo user is incapable of using this endpoint.
      responses:
        '204':
          description: Empty response when data has been destroyed.
        '500':
          description: Internal error, or user is unauthorized to destroy data.
      parameters:
        - in: query
          name: objects
          description: The type of data that you wish to destroy.
          required: true
          schema:
            $ref: '#/components/schemas/DataDestroyObject'

  /api/v1/import/list:
    get:
      description: List all imports
      tags:
        - import
      operationId: listImport
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is per 50 items.
          required: false
          schema:
            type: integer
            example: 1
      summary: List al imports
      responses:
        '200':
          description: A list of import jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJobArray'
  /api/v1/import/{key}:
    get:
      description: Show info on single import.
      tags:
        - import
      summary: Show info on a single import
      operationId: getImport
      parameters:
        - in: path
          name: key
          required: true
          schema:
            type: string
            format: string
            example: x2Akaijm2
          description: The job key of an import job.
      responses:
        '200':
          description: 'The requested import job'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportJobSingle'
        '404':
          description: Import job not found
  /api/v1/import/{key}/transactions:
    get:
      tags:
        - import
      summary: List all transactions related to the import job. The correlation is made through the tag.
      description: |
        See summary
      operationId: listTransactionByImport
      parameters:
        - in: path
          name: key
          required: true
          schema:
            type: string
            format: string
            example: abcde
          description: The key of the import job
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).
          required: false
          schema:
            type: string
            format:  date
            example: 2018-09-17
        - in: query
          name: type
          description: Optional filter on the transaction type(s) returned.
          required: false
          schema:
            $ref: '#/components/schemas/TransactionTypeFilter'
      responses:
        '200':
          description: A list of transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'

  # TODO
  # upload import file.
  # Download used config file
  # set config value for provider
  # list of config values for provider that need filling in
  # read config value of provider
  # set config value for job
  # read config value for job
  # list of config values for job that need filling in

  /api/v1/link_types:
    get:
      tags:
        - links
      summary: List all types of links.
      description: |
        List all the link types the system has. These include the default ones as well as any new ones.
      operationId: listLinkType
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is 50 items.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of link types.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTypeArray'
    post:
      tags:
        - links
      summary: Create a new link type
      operationId: storeLinkType
      description: Creates a new link type. The data required can be submitted as a JSON body or as a list of parameters (in key=value pairs, like a webform).
      responses:
        '200':
          description: 'New link type stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTypeSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LinkType'
        description: JSON array with the necessary link type information or key=value pairs. See the model for the exact specifications.
        required: true
  /api/v1/link_types/{id}:
    get:
      tags:
        - links
      summary: Get single a link type.
      description: |
        Returns a single link type by its ID.
      operationId: getLinkType
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the link type.
      responses:
        '200':
          description: 'The requested link type'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTypeSingle'
        '404':
          description: Link type not found.
    put:
      summary: Update existing link type.
      description: |
        Used to update a single link type. All fields that are not submitted will be cleared (set to NULL). The model will tell you which fields are mandatory. You cannot update some of the system provided link types, indicated by the editable=false flag when you list it.
      operationId: updateLinkType
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the link type.
      tags:
        - links
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkType'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LinkType'
        description: JSON array or formdata with updated link type information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated link type stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkTypeSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Cannot delete this link type.
    delete:
      summary: Permanently delete link type.
      description: |
        Will permanently delete a link type. The links between transactions will be removed. The transactions themselves remain. You cannot delete some of the system provided link types, indicated by the editable=false flag when you list it.
      operationId: deleteLinkType
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the link type.
      tags:
        - links
      responses:
        '204':
          description: Link type deleted
        '404':
          description: No such link type
        '500':
          description: Cannot delete this link type.
  /api/v1/link_types/{id}/transactions:
    get:
      tags:
        - links
      summary: List all transactions under this link type.
      description: |
        List all transactions under this link type, both the inward and outward transactions.
      operationId: listTransactionByLinkType
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the link type.
        - in: query
          name: page
          description: Page number. The default pagination is per 50 items.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD, to limit the results.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD, to limit the results.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: type
          description: Optional filter on the transaction type(s) returned.
          required: false
          schema:
            $ref: '#/components/schemas/TransactionTypeFilter'
      responses:
        '200':
          description: A list of transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
  /api/v1/transaction_links:
    get:
      tags:
        - links
      summary: List all transaction links.
      description: |
        List all the transaction links.
      operationId: listTransactionLink
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is per 50 items.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of transaction links
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionLinkArray'
    post:
      tags:
        - links
      summary: Create a new link between transactions
      operationId: storeTransactionLink
      description: Store a new link between two transactions. For this end point you need the journal_id from a transaction.
      responses:
        '200':
          description: 'New transaction link stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionLinkSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionLink'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TransactionLink'
        description: JSON array with the necessary link type information or key=value pairs. See the model for the exact specifications.
        required: true
  /api/v1/transaction_links/{id}:
    get:
      tags:
        - links
      summary: Get a single link.
      description: |
        Returns a single link by its ID.
      operationId: getTransactionLink
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the transaction link.
      responses:
        '200':
          description: 'The requested link'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionLinkSingle'
        '404':
          description: No such transaction link.
    delete:
      summary: Permanently delete link between transactions.
      description: |
        Will permanently delete link. Transactions remain.
      operationId: deleteTransactionLink
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the transaction link.
      tags:
        - links
      responses:
        '204':
          description: Transaction link deleted
        '404':
          description: No such transaction link
    put:
      summary: Update an existing link between transactions.
      description: |
        Used to update a single existing link.
      operationId: updateTransactionLink
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the transaction link.
      tags:
        - links
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionLink'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TransactionLink'
        description: JSON array or formdata with updated link type information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated link type stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionLinkSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/piggy_banks:
    get:
      summary: List all piggy banks.
      description: List all piggy banks.
      operationId: listPiggyBank
      tags:
        - piggy_banks
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of piggy banks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggyBankArray'
    post:
      summary: Store a new piggy bank
      description: Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
      operationId: storePiggyBank
      tags:
        - piggy_banks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PiggyBank'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PiggyBank'
        description: "JSON array or key=value pairs with the necessary piggy bank information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'New piggy bank stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggyBankSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/piggy_banks/{id}:
    get:
      summary: Get a single piggy bank.
      description: Get a single piggy bank.
      operationId: getPiggyBank
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the piggy bank.
      tags:
        - piggy_banks
      responses:
        '200':
          description: 'The requested piggy bank'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggyBankSingle'
        '404':
          description: Piggy bank not found
    put:
      operationId: updatePiggyBank
      tags:
        - piggy_banks
      description: Update existing piggy bank.
      summary: Update existing piggy bank.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the piggy bank
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PiggyBank'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PiggyBank'
        description: JSON array with updated piggy bank information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated piggy bank stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggyBankSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      operationId: deletePiggyBank
      description: Delete a piggy bank.
      summary: Delete a piggy bank.
      tags:
        - piggy_banks
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the piggy bank.
      responses:
        '204':
          description: Piggy bank deleted.
        '404':
          description: No such piggy bank
  /api/v1/piggy_banks/{id}/events:
    get:
      summary: List all events linked to a piggy bank.
      description: List all events linked to a piggy bank (adding and removing money).
      operationId: listEventByPiggyBank
      tags:
        - piggy_banks
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the piggy bank
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of piggy bank related events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggyBankEventArray'
  /api/v1/piggy_banks/{id}/attachments:
    get:
      summary: Lists all attachments.
      description: Lists all attachments.
      operationId: listAttachmentByPiggyBank
      tags:
        - piggy_banks
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the piggy bank.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of attachments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
        '404':
          description: No such piggy bank.
  /api/v1/preferences:
    get:
      summary: List all users preferences.
      description: List all preferences of the user.
      operationId: listPreference
      tags:
        - preferences
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of preferences.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceArray'
  /api/v1/preferences/{name}:
    get:
      summary: Return a single preference.
      description: Return a single preference.
      operationId: getPreference
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
            format: string
            example: currencyPreference
          description: The name of the preference.
      tags:
        - preferences
      responses:
        '200':
          description: A single preference.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSingle'
    put:
      summary: Update preference
      description: Update a user's preference.
      operationId: updatePreference
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
            format: string
            example: currencyPreference
          description: The name of the preference. Will always overwrite. Will be created if it does not exist.
      tags:
        - preferences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Preference'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Preference'
        description: "JSON array or key=value pairs with the necessary preference information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'Updated preference.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreferenceSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/recurrences:
    get:
      summary: List all recurring transactions.
      description: List all recurring transactions.
      operationId: listRecurrence
      tags:
        - recurrences
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of recurring transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurrenceArray'
    post:
      summary: Store a new recurring transaction
      description: Creates a new recurring transaction. The data required can be submitted as a JSON body or as a list of parameters.
      operationId: storeRecurrence
      tags:
        - recurrences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recurrence'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Recurrence'
        description: "JSON array or key=value pairs with the necessary recurring transaction information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'New recurring transaction stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurrenceSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/recurrences/{id}:
    get:
      summary: Get a single recurring transaction.
      description: Get a single recurring transaction.
      operationId: getRecurrence
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the recurring transaction.
      tags:
        - recurrences
      responses:
        '200':
          description: 'The requested recurring transaction'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurrenceSingle'
        '404':
          description: Recurring transaction not found
    put:
      operationId: updateRecurrence
      tags:
        - recurrences
      description: Update existing recurring transaction.
      summary: Update existing recurring transaction.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the recurring transaction.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recurrence'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Recurrence'
        description: JSON array with updated recurring transaction information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated recurring transaction stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurrenceSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      operationId: deleteRecurrence
      description: Delete a recurring transaction. Transactions created will not be deleted.
      summary: Delete a recurring transaction.
      tags:
        - recurrences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the recurring transaction.
      responses:
        '204':
          description: Recurring transaction deleted.
        '404':
          description: No such recurring transaction
  /api/v1/recurrences/{id}/transactions:
    get:
      summary: List all transactions created by a recurring transaction.
      description: List all transactions created by a recurring transaction, optionally limited to the date ranges specified.
      operationId: listTransactionByRecurrence
      tags:
        - recurrences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the recurring transaction.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD. Both the start and end date must be present.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD. Both the start and end date must be present.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: type
          description: Optional filter on the transaction type(s) returned
          required: false
          schema:
            $ref: '#/components/schemas/TransactionTypeFilter'
      responses:
        '200':
          description: A list of transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
  /api/v1/recurrences/trigger:
    post:
      summary: "Trigger the creation of recurring transactions (like a cron job)."
      description: |
        Triggers the recurring transactions, like a cron job would. If the schedule does not call for a new transaction to be created, nothing will happen.
      operationId: triggerRecurrence
      tags:
        - recurrences
      responses:
        '204':
          description: 'Not triggered (not yet due or unable to).'
        '200':
          description: "Triggered. Due to the way it's fired (an asynchronous job), the result cannot be shown to you."

  /api/v1/rule_groups:
    get:
      summary: List all rule groups.
      description: List all rule groups.
      operationId: listRuleGroup
      tags:
        - rule_groups
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is 50
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of rule groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleGroupArray'
    post:
      summary: Store a new rule group.
      description: Creates a new rule group. The data required can be submitted as a JSON body or as a list of parameters.
      operationId: storeRuleGroup
      tags:
        - rule_groups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleGroup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RuleGroup'
        description: "JSON array or key=value pairs with the necessary rule group information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'New rule group stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleGroupSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/rule_groups/{id}:
    get:
      summary: Get a single rule group.
      description: Get a single rule group. This does not include the rules. For that, see below.
      operationId: getRuleGroup
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the rule group.
      tags:
        - rule_groups
      responses:
        '200':
          description: 'The requested rule group'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleGroupSingle'
        '404':
          description: Rule group not found.
    put:
      operationId: updateRuleGroup
      tags:
        - rule_groups
      description: Update existing rule group.
      summary: Update existing rule group.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the rule group.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleGroup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RuleGroup'
        description: JSON array with updated rule group information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated rule group stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleGroupSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      operationId: deleteRuleGroup
      description: Delete a rule group.
      summary: Delete a rule group.
      tags:
        - rule_groups
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the rule group.
      responses:
        '204':
          description: Rule group deleted.
        '404':
          description: No such rule group
  /api/v1/rule_groups/{id}/test:
    get:
      summary: Test which transactions would be hit by the rule group. No changes will be made.
      description: Test which transactions would be hit by the rule group. No changes will be made. Limit the result if you want to.
      operationId: testRuleGroup
      tags:
        - rule_groups
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the rule group.
        - in: query
          name: page
          description: Page number. The default pagination is 50 items.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: search_limit
          description: |
            Maximum number of transactions Firefly III will try. Don't set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200.
          required: false
          schema:
            type: integer
        - in: query
          name: triggered_limit
          description: |
            Maximum number of transactions the rule group can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don't go above the user's page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow.
          required: false
          schema:
            type: integer
        - in: query
          name: accounts
          explode: false
          description: |
            Limit the testing of the rule group to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.
          required: false
          example: "1,2,3"
          schema:
            type: string
            format: string
      responses:
        '200':
          description: A list of transactions that would be changed by any of the rules of the rule group. No changes will be made.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
  /api/v1/rule_groups/{id}/rules:
    get:
      summary: List rules in this rule group.
      description: List rules in this rule group.
      operationId: listRuleByGroup
      tags:
        - rule_groups
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the rule group.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleArray'
  /api/v1/rule_groups/{id}/trigger:
    post:
      summary: Fire the rule group on your transactions.
      description: Fire the rule group on your transactions. Changes will be made by the rules in the rule group! Limit the result if you want to.
      operationId: fireRuleGroup
      tags:
        - rule_groups
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the rule group.
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.
          required: false
          schema:
            type: string
            example: 2018-09-17
            format: date
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.
          required: false
          schema:
            type: string
            example: 2018-09-17
            format: date
        - in: query
          name: accounts
          explode: false
          description: |
            Limit the testing of the rule group to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.
          required: false
          example: "1,2,3"
          schema:
            type: string
            format: string
      responses:
        '204':
          description: "The rules in the group are executed. Due to the setup of this function (asynchronous job execution) the result cannot be displayed."

  /api/v1/rules:
    get:
      summary: List all rules.
      description: List all rules.
      operationId: listRule
      tags:
        - rules
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of rules
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleArray'
    post:
      summary: Store a new rule
      description: Creates a new rule. The data required can be submitted as a JSON body or as a list of parameters.
      operationId: storeRule
      tags:
        - rules
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Rule'
        description: "JSON array or key=value pairs with the necessary rule information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'New rule stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/rules/{id}:
    get:
      summary: Get a single rule.
      description: Get a single rule.
      operationId: getRule
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the object.X
      tags:
        - rules
      responses:
        '200':
          description: 'The requested rule'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSingle'
        '404':
          description: Rule not found
    put:
      operationId: updateRule
      tags:
        - rules
      description: Update existing rule.
      summary: Update existing rule.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the object.X
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rule'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Rule'
        description: JSON array with updated rule information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated rule stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      operationId: deleteRule
      description: Delete an rule.
      summary: Delete an rule.
      tags:
        - rules
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the rule.
      responses:
        '204':
          description: Rule deleted.
        '404':
          description: No such rule
  /api/v1/rules/{id}/test:
    get:
      summary: Test which transactions would be hit by the rule. No changes will be made.
      description: Test which transactions would be hit by the rule. No changes will be made. Limit the result if you want to.
      operationId: testRule
      tags:
        - rules
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the rule.
        - in: query
          name: page
          description: Page number. The default pagination is 50 items.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD, to limit the transactions the test will be applied to. Both the start date and the end date must be present.
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: search_limit
          description: |
            Maximum number of transactions Firefly III will try. Don't set this too high, or it will take Firefly III very long to run the test. I suggest a max of 200.
          required: false
          schema:
            type: integer
        - in: query
          name: triggered_limit
          description: |
            Maximum number of transactions the rule can actually trigger on, before Firefly III stops. I would suggest setting this to 10 or 15. Don't go above the user's page size, because browsing to page 2 or 3 of a test result would fire the test again, making any navigation efforts very slow.
          required: false
          schema:
            type: integer
        - in: query
          name: accounts
          explode: false
          description: |
            Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.
          required: false
          example: "1,2,3"
          schema:
            type: string
            format: string
      responses:
        '200':
          description: A list of transactions that would be changed by the rule. No changes will be made.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
  /api/v1/rules/{id}/trigger:
    post:
      summary: Fire the rule on your transactions.
      description: Fire the rule group on your transactions. Changes will be made by the rules in the group! Limit the result if you want to.
      operationId: fireRule
      tags:
        - rules
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the rule.
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.
          required: false
          schema:
            type: string
            example: 2018-09-17
            format: date
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD, to limit the transactions the actions will be applied to. Both the start date and the end date must be present.
          required: false
          schema:
            type: string
            example: 2018-09-17
            format: date
        - in: query
          name: accounts
          explode: false
          description: |
            Limit the testing of the rule to these asset accounts. Only asset accounts will be accepted. Other types will be silently dropped.
          required: false
          example: "1,2,3"
          schema:
            type: string
            format: string
      responses:
        '204':
          description: "The rules in the group are executed. Due to the setup of this function (asynchronous job execution) the result cannot be displayed."

  # search
  # limit to specific objects
  # mixed result list?
  /api/v1/search/transactions:
    get:
      summary: Search for transactions
      description: Search for transactions
      operationId: searchTransactions
      tags:
        - search
      parameters:
        - in: query
          name: query
          description: The query you wish to search for.
          required: true
          schema:
            type: string
            example: "groceries"
        - in: query
          name: page
          description: Page number. The default pagination is 50
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
  /api/v1/search/accounts:
    get:
      summary: Search for accounts
      description: Search for accounts
      operationId: searchAccounts
      tags:
        - search
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is 50
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: query
          description: The query you wish to search for.
          required: true
          schema:
            type: string
            example: "checking"
        - in: query
          name: type
          description: The type of accounts you wish to limit the search to.
          required: true
          schema:
            $ref: '#/components/schemas/AccountTypeFilter'
        - in: query
          name: field
          description: The account field(s) you want to search in.
          required: true
          schema:
            $ref: '#/components/schemas/AccountSearchFieldFilter'
      responses:
        '200':
          description: A list of accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountArray'

  /api/v1/summary/basic:
    get:
      tags:
        - summary
      operationId: getBasicSummary
      summary: Returns basic sums of the users data.
      parameters:
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD.
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD.
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: currency_code
          description: |
            A currency code like EUR or USD, to filter the result.
          required: false
          schema:
            type: string
            format: string
      description: |
        Returns basic sums of the users data, like the net worth, spent and earned amounts. It is multi-currency, and is in Firefly III to populate the dashboard.
      responses:
        '200':
          description: An array of sums. It depends on the user what you can expect to get back, so please check out the documentation and try this out on the demo site.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicSummary'

  /api/v1/tag-cloud:
    get:
      summary: Returns a basic tag cloud.
      description: Returns a list of tags, which can be used to draw a basic tag cloud.
      operationId: getTagCloud
      tags:
        - tags
      parameters:
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD.
          required: true
          schema:
            type: string
            format: date
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD.
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: A tag cloud
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagCloud'
  /api/v1/tags:
    get:
      summary: List all tags.
      description: List all of the user's tags.
      operationId: listTag
      tags:
        - tags
      parameters:
        - in: query
          name: page
          description: Page number
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: A list of tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagArray'
    post:
      summary: Store a new tag
      description: Creates a new tag. The data required can be submitted as a JSON body or as a list of parameters.
      operationId: storeTag
      tags:
        - tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TagModel'
        description: "JSON array or key=value pairs with the necessary tag information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'New tag stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/tags/{tag}:
    get:
      summary: Get a single tag.
      description: Get a single tag.
      operationId: getTag
      parameters:
        - in: path
          name: tag
          description: Either the tag itself or the tag ID.
          required: true
          schema:
            type: string
            format: string
            example: groceries
        - in: query
          name: page
          description: Page number
          required: false
          schema:
            type: integer
      tags:
        - tags
      responses:
        '200':
          description: 'The requested tag'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSingle'
        '404':
          description: Tag not found
    put:
      operationId: updateTag
      tags:
        - tags
      description: Update existing tag.
      summary: Update existing tag.
      parameters:
        - in: path
          name: tag
          description: Either the tag itself or the tag ID.
          required: true
          schema:
            type: string
            format: string
            example: groceries
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagModel'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TagModel'
        description: JSON array with updated tag information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated tag stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      operationId: deleteTag
      description: Delete an tag.
      summary: Delete an tag.
      tags:
        - tags
      parameters:
        - in: path
          name: tag
          description: Either the tag itself or the tag ID.
          required: true
          schema:
            type: string
            format: string
            example: groceries
      responses:
        '204':
          description: Tag deleted.
        '404':
          description: "No such tag"

  /api/v1/tags/{tag}/transactions:
    get:
      summary: "List all transactions with this tag."
      description: "List all transactions with this tag."
      operationId: listTransactionByTag
      tags:
        - tags
      parameters:
        - in: path
          name: tag
          description: Either the tag itself or the tag ID.
          required: true
          schema:
            type: string
            format: string
            example: groceries
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: type
          description: Optional filter on the transaction type(s) returned.
          required: false
          schema:
            $ref: '#/components/schemas/TransactionTypeFilter'
      responses:
        '200':
          description: A list of transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
  /api/v1/tags/{tag}/attachments:
    get:
      summary: Lists all attachments.
      description: Lists all attachments.
      operationId: listAttachmentByTag
      tags:
        - tags
      parameters:
        - in: path
          name: tag
          description: Either the tag itself or the tag ID.
          required: true
          schema:
            type: string
            format: string
            example: groceries
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of attachments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
        '404':
          description: No such tag.
  /api/v1/transactions:
    get:
      summary: |
        List all the user's transactions.
      description: List all the user's transactions.
      operationId: listTransaction
      tags:
        - transactions
      parameters:
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
        - in: query
          name: start
          description: |
            A date formatted YYYY-MM-DD. This is the start date of the selected range (inclusive).
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: end
          description: |
            A date formatted YYYY-MM-DD. This is the end date of the selected range (inclusive).
          required: false
          schema:
            type: string
            format: date
            example: 2018-09-17
        - in: query
          name: type
          description: Optional filter on the transaction type(s) returned.
          required: false
          schema:
            $ref: '#/components/schemas/TransactionTypeFilter'
      responses:
        '200':
          description: A list of transactions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionArray'
    post:
      summary: Store a new transaction
      description: Creates a new transaction. The data required can be submitted as a JSON body or as a list of parameters.
      operationId: storeTransaction
      tags:
        - transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
        description: "JSON array or key=value pairs with the necessary transaction information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'New transaction stored(s), result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/transactions/{id}:
    get:
      summary: Get a single transaction.
      description: Get a single transaction.
      operationId: getTransaction
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the transaction.
      tags:
        - transactions
      responses:
        '200':
          description: 'The requested transaction.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSingle'
        '404':
          description: Transaction not found.
    put:
      operationId: updateTransaction
      tags:
        - transactions
      description: Update an existing transaction.
      summary: Update existing transaction.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the transaction.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Transaction'
        description: JSON array with updated transaction information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated transaction stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      operationId: deleteTransaction
      description: Delete a transaction.
      summary: Delete a transaction.
      tags:
        - transactions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the transaction.
      responses:
        '204':
          description: Transaction deleted.
        '404':
          description: No such transaction.
  /api/v1/transactions/{id}/attachments:
    get:
      summary: Lists all attachments.
      description: Lists all attachments.
      operationId: listAttachmentByTransaction
      tags:
        - transactions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the transaction.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of attachments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
        '404':
          description: No such transaction.
  /api/v1/transactions/{id}/piggy_bank_events:
    get:
      summary: Lists all piggy bank events.
      description: Lists all piggy bank events.
      operationId: listEventByTransaction
      tags:
        - transactions
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the transaction.
        - in: query
          name: page
          description: Page number. The default pagination is 50.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of piggy bank events.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PiggyBankEventArray'
        '404':
          description: No such transaction.
  /api/v1/transaction-journals/{id}:
    get:
      summary: Get a single transaction, based on one of the underlying transaction journals.
      description: Get a single transaction by underlying journal.
      operationId: getTransactionByJournal
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the transaction journal.
      tags:
        - transactions
      responses:
        '200':
          description: 'The requested transaction.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSingle'
        '404':
          description: Transaction not found.
  /api/v1/users:
    get:
      summary: List all users.
      description: List all the users in this instance of Firefly III.
      operationId: listUser
      tags:
        - users
      parameters:
        - in: query
          name: page
          description: The page number, if necessary. The default pagination is 50, so 50 users per page.
          required: false
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserArray'
    post:
      summary: Store a new user
      description: |
        Creates a new user. The data required can be submitted as a JSON body or as a list of parameters. The user will be given a random password, which they can reset using the "forgot password" function.
      operationId: storeUser
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: "JSON array or key=value pairs with the necessary user information. See the model for the exact specifications."
        required: true
      responses:
        '200':
          description: 'New user stored, result in response.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /api/v1/users/{id}:
    get:
      summary: Get a single user.
      description: Gets all info of a single user.
      operationId: getUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The user ID.
      tags:
        - users
      responses:
        '200':
          description: 'The requested user.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingle'
        '404':
          description: User not found.
    put:
      operationId: updateUser
      tags:
        - users
      description: Update existing user.
      summary: Update an existing user's information.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The user ID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: JSON array with updated user information. See the model for the exact specifications.
        required: true
      responses:
        '200':
          description: 'Updated user stored, result in response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSingle'
        '422':
          description: 'Validation errors (see body)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      operationId: deleteUser
      description: Delete a user. You cannot delete the current user.
      summary: Delete a user.
      tags:
        - users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            example: 1
          description: The user ID.
      responses:
        '204':
          description: User deleted.
        '404':
          description: No such user.
        '500':
          description: Error when deleting, or when it is the currently authenticated user.
components:
  schemas:
    Account:
      type: object
      required:
        - name
        - type
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        name:
          type: string
          format: string
          example: "My checking account"
        type:
          type: string
          format: string
          example: asset
          description: "Can only be one one these account types. import, initial-balance and reconciliation cannot be set manually."
          enum:
            - asset
            - expense
            - import
            - revenue
            - cash
            - liability
            - liabilities
            - "initial-balance"
            - reconciliation
        iban:
          type: string
          format: iban
          example: "GB98MIDL07009312345678"
        bic:
          type: string
          format: string
          example: "BOFAUS3N"
        account_number:
          type: string
          format: string
          example: "7009312345678"
        opening_balance:
          type: number
          format: double
          example: -1012.12
        opening_balance_date:
          type: string
          format: date
          example: "2018-09-17"
        virtual_balance:
          type: string
          format: amount
          example: "123.45"
        current_balance:
          type: string
          format: amount
          example: "123.45"
          readOnly: true
        current_balance_date:
          type: string
          format: date
          example: "2018-09-17"
          readOnly: true
        currency_id:
          type: integer
          format: int32
          example: 12
          description: "Use either currency_id or currency_code. Defaults to the user's default currency."
        currency_code:
          type: string
          format: string
          example: "EUR"
          description: "Use either currency_id or currency_code. Defaults to the user's default currency."
        currency_symbol:
          type: string
          format: string
          example: "$"
          readOnly: true
        currency_decimal_places:
          type: integer
          format: int32
          example: 2
          readOnly: true
        active:
          type: boolean
          format: boolean
          example: true
          description: "If omitted, defaults to true."
        include_net_worth:
          type: boolean
          format: boolean
          example: true
          description: "If omitted, defaults to true."
          writeOnly: true
        account_role:
          type: string
          format: string
          example: "defaultAsset"
          description: "Is only mandatory when the type is asset."
          enum:
            - defaultAsset
            - sharedAsset
            - savingAsset
            - ccAsset
            - cashWalletAsset
        credit_card_type:
          type: string
          format: string
          example: monthlyFull
          description: "Mandatory when the account_role is ccAsset. Can only be monthlyFull."
          nullable: true
          enum:
            - monthlyFull
        monthly_payment_date:
          nullable: true
          type: string
          format: date
          example: "2018-09-17"
          description: "Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank."
        liability_type:
          type: string
          format: string
          example: loan
          description: "Mandatory when type is liability. Specifies the exact type."
          enum:
            - loan
            - debt
            - mortgage
        liability_amount:
          type: string
          format: amount
          example: "123.45"
          description: "Mandatory when type is liability. Amount of money in the liability. Must be positive."
        liability_start_date:
          type: string
          format: date
          example: "2017-09-17"
          description: "Mandatory when type is liability. Start date for the liability."
        interest:
          type: string
          format: string
          example: "5.3"
          description: "Mandatory when type is liability. Interest percentage."
        interest_period:
          type: string
          format: string
          example: monthly
          description: "Mandatory when type is liability. Period over which the interest is calculated."
          enum:
            - daily
            - monthly
            - yearly
        notes:
          type: string
          format: string
          example: "Some example notes"

    AccountArray:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AccountRead'
        meta:
          $ref: '#/components/schemas/Meta'

    AccountRead:
      type: object
      required:
        - type
        - id
        - attributes
      properties:
        type:
          type: string
          format: string
          example: "accounts"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/Account'

    AccountSearchFieldFilter:
      type: string
      enum:
        - all
        - iban
        - name
        - number
        - id

    AccountSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/AccountRead'

    AccountTypeFilter:
      type: string
      enum:
        - all
        - asset
        - cash
        - expense
        - revenue
        - special
        - hidden
        - liability
        - liabilities
        - Default account
        - Cash account
        - Asset account
        - Expense account
        - Revenue account
        - Initial balance account
        - Beneficiary account
        - Import account
        - Reconciliation account
        - Loan
        - Debt
        - Mortgage
    AccountTypeProperty:
      type: string
      format: string
      example: "Asset account"
      readOnly: true
      enum:
        - Default account
        - Cash account
        - Asset account
        - Expense account
        - Revenue account
        - Initial balance account
        - Beneficiary account
        - Import account
        - Reconciliation account
        - Loan
        - Debt
        - Mortgage
    Attachment:
      type: object
      required:
        - filename
        - attachable_type
        - attachable_id
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        filename:
          type: string
          format: string
          example: "file.pdf"
        attachable_type:
          type: string
          format: string
          example: "Bill"
          description: The object class to which the attachment must be linked.
          enum:
            - Bill
            - TransactionJournal
            - ImportJob
        attachable_id:
          type: integer
          format: int32
          example: 134
          description: ID of the model this attachment is linked to.
        md5:
          type: string
          format: string
          example: "0c3f95f34370baa88f9fd9a671fea305"
          description: MD5 hash of the file for basic duplicate detection.
        download_uri:
          type: string
          format: string
          example: "https://demo.firefly-iii.org/api/v1/attachments/191/download"
        upload_uri:
          type: string
          format: string
          example: "https://demo.firefly-iii.org/api/v1/attachments/191/download"
        title:
          type: string
          format: string
          example: "Some PDF file"
        notes:
          type: string
          format: string
          example: "Some notes"
        mime:
          type: string
          format: string
          example: "application/pdf"
          readOnly: true
        size:
          type: integer
          format: int32
          example: 48211
          readOnly: true

    AttachmentArray:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AttachmentRead'
        meta:
          $ref: '#/components/schemas/Meta'

    AttachmentRead:
      type: object
      required:
        - type
        - id
        - attributes
        - links
      properties:
        type:
          type: string
          format: string
          example: "attachments"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/Attachment'
        links:
          $ref: '#/components/schemas/ObjectLink'

    AttachmentSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/AttachmentRead'

    AvailableBudget:
      type: object
      required:
        - amount
        - start
        - end
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        currency_id:
          type: integer
          format: int32
          example: 5
          description: Use either currency_id or currency_code.
        currency_code:
          type: string
          format: string
          example: EUR
          description: Use either currency_id or currency_code.
        currency_symbol:
          type: string
          format: string
          example: "$"
          readOnly: true
        currency_decimal_places:
          type: integer
          format: int32
          example: 2
          readOnly: true
        amount:
          type: string
          format: amount
          example: "123.45"
        start:
          type: string
          format: date
          example: "2017-09-17"
          description: Start date of the available budget.
        end:
          type: string
          format: date
          example: "2017-09-17"
          description: End date of the available budget.
        spent_in_budgets:
          type: array
          items:
            $ref: '#/components/schemas/BudgetSpent'
          readOnly: true
        spent_outside_budget:
          type: array
          items:
            $ref: '#/components/schemas/BudgetSpent'
          readOnly: true

    AvailableBudgetArray:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/AvailableBudgetRead'
        meta:
          $ref: '#/components/schemas/Meta'

    AvailableBudgetRead:
      type: object
      required:
        - type
        - id
        - attributes
      properties:
        type:
          type: string
          format: string
          example: "available_budgets"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/AvailableBudget'

    AvailableBudgetSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/AvailableBudgetRead'

    BasicSummary:
      type: array
      items:
        $ref: '#/components/schemas/BasicSummaryEntry'

    BasicSummaryEntry:
      type: object
      properties:
        key:
          type: string
          format: string
          example: "balance-in-EUR"
          description: "This is a reference to the type of info shared, not influenced by translations or user preferences."
        title:
          type: string
          format: string
          example: "Balance ($)"
          description: "A translated title for the information shared."
        monetary_value:
          type: number
          format: double
          example: 123.45
          description: "The amount as a float."
        currency_id:
          type: integer
          format: int32
          example: 5
          description: "The currency ID of the associated currency."
        currency_code:
          type: string
          format: string
          example: "EUR"
        currency_symbol:
          type: string
          format: string
          example: "$"
        currency_decimal_places:
          type: integer
          format: int32
          example: 2
          description: "Number of decimals for the associated currency."
        value_parsed:
          type: string
          format: string
          example: "$ 12.45"
          description: "The amount formatted according to the users locale"
        local_icon:
          type: string
          format: string
          example: "balance-scale"
          description: "Reference to a font-awesome icon without the fa- part."
        sub_title:
          type: string
          format: string
          example: "$20 + $-40"
          description: "A short explanation of the amounts origin. Already formatted according to the locale of the user or translated, if relevant."

    Bill:
      type: object
      required:
        - name
        - amount_min
        - amount_max
        - date
        - repeat_freq
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        currency_id:
          type: integer
          format: int32
          example: 5
          description: Use either currency_id or currency_code
        currency_code:
          type: string
          format: string
          example: EUR
          description: Use either currency_id or currency_code
        currency_symbol:
          type: string
          format: string
          example: "$"
          readOnly: true
        currency_decimal_places:
          type: integer
          format: int32
          example: 2
          readOnly: true
        name:
          type: string
          format: string
          example: "Rent"
        amount_min:
          type: string
          format: amount
          example: "123.45"
        amount_max:
          type: string
          format: amount
          example: "123.45"
        date:
          type: string
          format: date
          example: "2018-09-17"
        repeat_freq:
          type: string
          format: string
          example: "monthly"
          description: How often the bill must be paid.
          enum:
            - weekly
            - monthly
            - quarterly
            - "half-year"
            - yearly
        skip:
          type: integer
          format: int32
          example: 0
          description: How often the bill must be skipped. 1 means a bi-monthly bill.
        active:
          type: boolean
          format: boolean
          example: true
          description: If the bill is active.
        notes:
          type: string
          format: string
          example: "Some example notes"
        next_expected_match:
          type: string
          format: date
          example: "2018-09-17"
          description: "When the bill is expected to be due."
          readOnly: true
        object_group_id:
          type: integer
          format: int32
          example: 5
          description: The group ID of the group this object is part of. NULL if no group.
        object_group_order:
          type: integer
          format: int32
          example: 5
          description: The order of the group. At least 1, for the highest sorting.
        object_group_title:
          type: string
          format: string
          example: "Example Group"
          description: The name of the group. NULL if no group.
        pay_dates:
          type: array
          description: "Array of future dates when the bill is expected to be paid. Autogenerated."
          readOnly: true
          items:
            type: string
            format: date
            readOnly: true
        paid_dates:
          type: array
          description: "Array of past transactions when the bill was paid."
          readOnly: true
          items:
            type: object
            readOnly: true
            properties:
              transaction_group_id:
                type: integer
                format: int32
                description: "Transaction group ID of the paid bill."
                readOnly: true
              transaction_journal_id:
                type: integer
                format: int32
                description: "Transaction journal ID of the paid bill."
                readOnly: true
              date:
                type: string
                format: date
                description: "Date the bill was paid."
                readOnly: true

    BillArray:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BillRead'
        meta:
          $ref: '#/components/schemas/Meta'

    BillRead:
      type: object
      required:
        - type
        - id
        - attributes
      properties:
        type:
          type: string
          format: string
          example: "bills"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/Bill'

    BillSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/BillRead'

    Budget:
      type: object
      required:
        - name
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        name:
          type: string
          format: string
          example: "Bills"
        active:
          type: boolean
          format: boolean
          example: false
        order:
          type: integer
          format: int32
          example: 5
          readOnly: true
        spent:
          description: "Information on how much was spent in this budget. Is only filled in when the start and end date are submitted."
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/BudgetSpent'

    BudgetArray:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BudgetRead'
        meta:
          $ref: '#/components/schemas/Meta'

    BudgetLimit:
      type: object
      required:
        - amount
        - start
        - end
        - budget_id
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        currency_id:
          type: integer
          format: int32
          example: 5
          description: Use either currency_id or currency_code. Defaults to the user's default currency.
        currency_code:
          type: string
          format: string
          example: EUR
          description: Use either currency_id or currency_code. Defaults to the user's default currency.
        currency_symbol:
          type: string
          format: string
          example: "$"
          readOnly: true
        currency_decimal_places:
          type: integer
          format: int32
          example: 2
          readOnly: true
        budget_id:
          type: integer
          format: int32
          example: 23
          description: The budget ID of the associated budget.
        start:
          type: string
          format: date
          example: "2017-09-17"
          description: Start date of the budget limit.
        end:
          type: string
          format: date
          example: "2017-09-17"
          description: End date of the budget limit.
        amount:
          type: string
          format: amount
          example: "123.45"
        spent:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/BudgetSpent'

    BudgetLimitArray:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BudgetLimitRead'
        meta:
          $ref: '#/components/schemas/Meta'

    BudgetLimitRead:
      type: object
      required:
        - type
        - id
        - attributes
      properties:
        type:
          type: string
          format: string
          example: "budget_limits"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/BudgetLimit'

    BudgetLimitSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/BudgetLimitRead'

    BudgetRead:
      type: object
      required:
        - type
        - id
        - attributes
      properties:
        type:
          type: string
          format: string
          example: "budgets"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/Budget'

    BudgetSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/BudgetRead'

    BudgetSpent:
      type: object
      properties:
        sum:
          type: string
          format: amount
          example: "123.45"
          description: The amount spent.
        currency_id:
          type: integer
          format: int32
          example: 5
        currency_code:
          type: string
          format: string
          example: "USD"
        currency_symbol:
          type: string
          format: string
          example: "$"
        currency_decimal_places:
          type: integer
          format: int32
          example: 2
          description: Number of decimals supported by the currency

    Category:
      type: object
      required:
        - name
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        name:
          type: string
          format: string
          example: "Lunch"
        spent:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/CategorySpent'
        earned:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/CategoryEarned'

    CategoryArray:
      type: object
      required:
        - data
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CategoryRead'
        meta:
          $ref: '#/components/schemas/Meta'

    CategoryEarned:
      type: object
      properties:
        start:
          type: string
          format: date
          example: "2018-04-01"
        end:
          type: string
          format: date
          example: "2018-04-30"
        currency_id:
          type: integer
          format: int32
          example: 5
        currency_code:
          type: string
          format: string
          example: "USD"
        currency_symbol:
          type: string
          format: string
          example: "$"
        currency_decimal_places:
          type: integer
          format: int32
          example: 2
          description: Number of decimals supported by the currency
        amount:
          type: string
          format: amount
          example: "123.45"
          description: The amount earned.

    CategoryRead:
      type: object
      required:
        - type
        - id
        - attributes
      properties:
        type:
          type: string
          format: string
          example: "categories"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/Category'

    CategorySingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/CategoryRead'

    CategorySpent:
      type: object
      properties:
        start:
          type: string
          format: date
          example: "2018-04-01"
        end:
          type: string
          format: date
          example: "2018-04-30"
        currency_id:
          type: integer
          format: int32
          example: 5
        currency_code:
          type: string
          format: string
          example: "USD"
        currency_symbol:
          type: string
          format: string
          example: "$"
        currency_decimal_places:
          type: integer
          format: int32
          example: 2
          description: Number of decimals supported by the currency
        amount:
          type: string
          format: amount
          example: "-12423.45"
          description: The amount spent.

    ChartBar:
      type: array
      items:
        $ref: '#/components/schemas/ChartDataSet'

    ChartDataPoint:
      type: object
      properties:
        key:
          type: string
          format: string
          example: "value"
          description: "The key is the label of the value, so for example: '2018-01-01' => 13 or 'Groceries' => -123."

    ChartDataSet:
      type: object
      properties:
        label:
          type: string
          format: string
          example: "Checking account"
          description: "This is the title of the current set. It can refer to an account, a budget or another object (by name)."
        currency_id:
          type: integer
          format: int32
          example: 5
          description: "The currency ID of the currency associated to the data in the entries."
        currency_code:
          type: string
          format: string
          example: "EUR"
        currency_symbol:
          type: string
          format: string
          example: "$"
        currency_decimal_places:
          type: integer
          format: int32
          example: 2
          description: "Number of decimals for the currency associated to the data in the entries."
        type:
          type: string
          format: string
          example: "line"
          description: "Indicated the type of chart that is expected to be rendered. You can safely ignore this if you want."
        yAxisID:
          type: integer
          format: int32
          example: 0
          description: "Used to indicate the Y axis for this data set. Is usually between 0 and 1 (left and right side of the chart)."
        entries:
          type: array
          description: "The actual entries for this data set. They 'key' value is the label for the data point. The value is the actual (numerical) value."
          items:
            $ref: '#/components/schemas/ChartDataPoint'
    ChartLine:
      type: array
      items:
        $ref: '#/components/schemas/ChartDataSet'

    Configuration:
      type: object
      properties:
        data:
          type: object
          properties:
            is_demo_site:
              type: boolean
              format: boolean
              example: true
            permission_update_check:
              type: integer
              format: int32
              example: -1
              nullable: true
              description: |
                If the user has given permission to check for updates.
                - null = never asked.
                - -1 = never asked.
                - 0 = no permission.
                - 1 = permission
            last_update_check:
              type: string
              format: date-time
              example: "2018-09-17T12:46:47+01:00"
            single_user_mode:
              type: boolean
              format: boolean
              example: true
              description: Whether other users can register.
    ConfigurationUpdate:
      type: object
      required:
        - value
      properties:
        value:
          type: string
          format: string
          example: "1"
          description: Can be a number or a boolean. This depends on the actual configuration value.
    Currency:
      type: object
      required:
        - code
        - name
        - symbol
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        enabled:
          type: boolean
          format: boolean
          example: true
          description: defaults to true
        default:
          type: boolean
          format: boolean
          example: false
          description: Make this currency the default currency.
        code:
          type: string
          format: string
          example: AMS
        name:
          type: string
          format: string
          example: Ankh-Morpork dollar
        symbol:
          type: string
          format: string
          example: "AM$"
        decimal_places:
          type: integer
          format: int32
          example: 2
          description: Supports 0-16 decimals.

    CurrencyArray:
      type: object
      required:
        - data
        - meta
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CurrencyRead'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'

    CurrencyRead:
      type: object
      required:
        - type
        - id
        - attributes
      properties:
        type:
          type: string
          format: string
          example: "currencies"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/Currency'

    CurrencySingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/CurrencyRead'

    DataDestroyObject:
      type: string
      enum:
        - budgets
        - bills
        - piggy_banks
        - rules
        - recurring
        - categories
        - tags
        - object_groups
        - accounts
        - asset_accounts
        - expense_accounts
        - revenue_accounts
        - liabilities
        - transactions
        - withdrawals
        - deposits
        - transfers

    ExchangeRate:
      type: object
      properties:
        type:
          type: string
          format: string
          example: "currency_exchange_rates"
          description: "Immutable value"
        id:
          type: integer
          format: int32
          example: 2
        attributes:
          type: object
          properties:
            created_at:
              type: string
              format: date-time
              example: "2018-09-17T12:46:47+01:00"
            updated_at:
              type: string
              format: date-time
              example: "2018-09-17T12:46:47+01:00"
            from_currency_id:
              type: integer
              format: int32
              example: 5
            from_currency_name:
              type: string
              format: string
              example: "Euro"
            from_currency_code:
              type: string
              format: string
              example: EUR
            from_currency_symbol:
              type: string
              format: string
              example: "$"
            from_currency_decimal_places:
              type: integer
              format: int32
              example: 2
            to_currency_id:
              type: integer
              format: int32
              example: 5
            to_currency_code:
              type: string
              format: string
              example: EUR
            to_currency_symbol:
              type: string
              format: string
              example: "$"
            to_currency_decimal_places:
              type: integer
              format: int32
              example: 2
            date:
              type: string
              format: date
              example: "2018-09-17"
            rate:
              type: number
              format: float
              example: 1.1213
            amount:
              type: string
              format: amount
              example: "123.45"
              description: The amount in the "to"-currency, if provided in the request.

    ExchangeRateArray:
      type: object
      required:
        - data
        - meta
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ExchangeRate'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'

    ImportJob:
      type: object
      properties:
        type:
          type: string
          format: string
          example: "import_jobs"
          description: "Immutable value"
        id:
          type: integer
          format: int32
          example: 2
        attributes:
          type: object
          properties:
            created_at:
              type: string
              format: date-time
              example: "2018-09-17T12:46:47+01:00"
            updated_at:
              type: string
              format: date-time
              example: "2018-09-17T12:46:47+01:00"
            tag_id:
              type: integer
              format: int32
              example: 121
              description: ID of the tag related to the import job, if present.
            tag_tag:
              type: string
              format: string
              example: "Import with key 'abcdef'"
              description: Tag related to the import job, if present.
            key:
              type: string
              format: string
              example: abcdef
              description: Import job unique identifier.
            file_type:
              type: string
              format: string
              example: csv
              description: File type, if relevant.
            provider:
              type: string
              format: string
              example: bunq
              description: Import provider that did the import.
            status:
              type: string
              format: string
              example: import_finished
              description: Status of import job.
            stage:
              type: string
              format: string
              example: apply_rules
              description: Current stage.
            configuration:
              type: string
              format: string
              description: JSON string with job-specific configuration.
            extended_status:
              type: string
              format: string
              description: JSON string with job-specific status.
            transactions:
              type: string
              format: string
              description: JSON string with a count of transactions in the job.
            errors:
              type: string
              format: string
              description: JSON string with a list of errors.
    ImportJobArray:
      type: object
      required:
        - data
        - meta
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ImportJob'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'

    ImportJobSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/ImportJob'

    LinkType:
      type: object
      required:
        - name
        - inward
        - outward
      properties:
        name:
          type: string
          format: string
          example: "Paid"
        inward:
          type: string
          format: string
          example: "is (partially) paid for by"
        outward:
          type: string
          format: string
          example: "(partially) pays for"
        editable:
          type: boolean
          format: boolean
          example: false
          readOnly: true

    LinkTypeArray:
      type: object
      required:
        - data
        - meta
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LinkTypeRead'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'

    LinkTypeRead:
      type: object
      required:
        - type
        - id
        - attributes
        - links
      properties:
        type:
          type: string
          format: string
          example: "link_types"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/LinkType'
        links:
          $ref: '#/components/schemas/ObjectLink'

    LinkTypeSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/LinkTypeRead'

    Meta:
      type: object
      properties:
        pagination:
          type: object
          properties:
            total:
              type: integer
              example: 3
            count:
              type: integer
              example: 20
            per_page:
              type: integer
              example: 100
            current_page:
              type: integer
              example: 1
            total_pages:
              type: integer
              example: 1
    ObjectLink:
      type: object
      properties:
        0:
          type: object
          properties:
            rel:
              type: string
              format: string
              example: "self"
            uri:
              type: string
              format: string
              example: "/OBJECTS/1"
        self:
          type: string
          format: uri
          example: "https://demo.firefly-iii.org/api/v1/OBJECTS/1"

    PageLink:
      type: object
      properties:
        self:
          type: string
          format: uri
          example: "https://demo.firefly-iii.org/api/v1/OBJECT?&page=4"
        first:
          type: string
          format: uri
          example: "https://demo.firefly-iii.org/api/v1/OBJECT?&page=1"
        last:
          type: string
          format: uri
          example: "https://demo.firefly-iii.org/api/v1/OBJECT?&page=12"

    PiggyBank:
      type: object
      required:
        - name
        - account_id
        - target_amount
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        name:
          type: string
          format: string
          example: "New digital camera"
        account_id:
          type: integer
          format: int32
          example: 13
          description: The ID of the asset account this piggy bank is connected to.
        account_name:
          type: string
          format: string
          example: "Savings account"
          description: The name of the asset account this piggy bank is connected to.
          readOnly: true
        currency_id:
          type: integer
          format: int32
          example: 5
          readOnly: true
        currency_code:
          type: string
          format: string
          example: "USD"
          readOnly: true
        currency_symbol:
          type: string
          format: string
          example: "$"
          readOnly: true
        currency_decimal_places:
          type: integer
          format: int32
          example: 2
          description: Number of decimals supported by the currency
          readOnly: true
        target_amount:
          type: string
          format: amount
          example: "123.45"
        percentage:
          type: number
          format: float
          example: 12.5
          readOnly: true
        current_amount:
          type: string
          format: amount
          example: "123.45"
        left_to_save:
          type: number
          format: double
          example: 700
          readOnly: true
        save_per_month:
          type: number
          format: double
          example: 12.45
          readOnly: true
        start_date:
          type: string
          format: date
          example: "2018-09-17"
          description: The date you started with this piggy bank.
        target_date:
          type: string
          format: date
          example: "2020-09-17"
          description: The date you intend to finish saving money.
        order:
          type: integer
          format: int32
          example: 5
        active:
          type: boolean
          format: boolean
          example: true
          readOnly: true
        notes:
          type: string
          format: string
          example: "Some notes"
        object_group_id:
          type: integer
          format: int32
          example: 5
          description: The group ID of the group this object is part of. NULL if no group.
        object_group_order:
          type: integer
          format: int32
          example: 5
          description: The order of the group. At least 1, for the highest sorting.
        object_group_title:
          type: string
          format: string
          example: "Example Group"
          description: The name of the group. NULL if no group.

    PiggyBankArray:
      type: object
      required:
        - data
        - meta
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PiggyBankRead'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'

    PiggyBankEvent:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
        currency_id:
          type: integer
          format: int32
          example: 5
        currency_code:
          type: string
          format: string
          example: EUR
        currency_symbol:
          type: string
          format: string
          example: "$"
        currency_decimal_places:
          type: integer
          format: int32
          example: 2
        amount:
          type: string
          format: amount
          example: "123.45"
        journal_id:
          type: integer
          format: int32
          example: 4291
          description: The journal associated with the event.
        transaction_id:
          type: integer
          format: int32
          example: 4291

    PiggyBankEventArray:
      type: object
      required:
        - data
        - meta
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PiggyBankEventRead'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'

    PiggyBankEventRead:
      type: object
      required:
        - type
        - id
        - attributes
        - links
      properties:
        type:
          type: string
          format: string
          example: "piggy_bank_eventss"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/PiggyBankEvent'
        links:
          $ref: '#/components/schemas/ObjectLink'

    PiggyBankRead:
      type: object
      required:
        - type
        - id
        - attributes
        - links
      properties:
        type:
          type: string
          format: string
          example: "piggy_banks"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/PiggyBank'
        links:
          $ref: '#/components/schemas/ObjectLink'

    PiggyBankSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/PiggyBankRead'

    Preference:
      type: object
      required:
        - data
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        name:
          type: string
          format: string
          example: currencyPreference
          readOnly: true
        data:
          type: string
          format: string
          example: EUR
          description: "This field can also be an array"

    PreferenceArray:
      type: object
      required:
        - data
        - meta
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PreferenceRead'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'

    PreferenceRead:
      type: object
      required:
        - type
        - id
        - attributes
      properties:
        type:
          type: string
          format: string
          example: "preferences"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/Preference'

    PreferenceSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/PreferenceRead'

    Recurrence:
      type: object
      required:
        - type
        - title
        - first_date
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        type:
          type: string
          format: string
          example: "withdrawal"
          enum:
            - withdrawal
            - transfer
            - deposit
            - "opening-balance"
            - reconciliation
        title:
          type: string
          format: string
          example: "Rent"
        description:
          type: string
          format: string
          example: "Recurring transaction for the monthly rent"
          description: Not to be confused with the description of the actual transaction(s) being created.
        first_date:
          type: string
          format: date
          example: "2017-09-17"
          description: "First time the recurring transaction will fire. Must be after today."
        latest_date:
          type: string
          format: date
          example: "2018-09-17"
          description: "First time the recurring transaction will fire. Must be after today."
        repeat_until:
          type: string
          format: date
          example: "2018-09-17"
          description: "Date until the recurring transaction can fire. Use either this field or repetitions."
        nr_of_repetitions:
          type: integer
          format: int32
          example: 5
          description: Max number of created transactions. Use either this field or repeat_until.
        apply_rules:
          type: boolean
          format: boolean
          example: true
          description: "Whether or not to fire the rules after the creation of a transaction."
        active:
          type: boolean
          format: boolean
          example: true
          description: If the recurrence is even active.
        notes:
          type: string
          format: string
          example: "Some notes"
        repetitions:
          type: array
          items:
            $ref: '#/components/schemas/RecurrenceRepetition'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/RecurrenceTransaction'

    RecurrenceArray:
      type: object
      required:
        - data
        - meta
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/RecurrenceRead'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'

    RecurrenceRead:
      type: object
      required:
        - type
        - id
        - attributes
        - links
      properties:
        type:
          type: string
          format: string
          example: "recurrences"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/Recurrence'
        links:
          $ref: '#/components/schemas/ObjectLink'

    RecurrenceRepetition:
      type: object
      required:
        - type
        - moment
      properties:
        id:
          type: integer
          format: int32
          example: 2
          readOnly: true
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        type:
          type: string
          format: string
          example: "weekly"
          description: "The type of the repetition. ndom means: the n-th weekday of the month, where you can also specify which day of the week."
          enum:
            - daily
            - weekly
            - ndom
            - monthly
            - yearly
        moment:
          type: string
          format: string
          example: "3"
          description: |
            Information that defined the type of repetition.
            - For 'daily', this is empty.
            - For 'weekly', it is day of the week between 1 and 7 (Monday - Sunday).
            - For 'ndom', it is '1,2' or '4,5' or something else, where the first number is the week in the month, and the second number is the day in the week (between 1 and 7). '2,3' means: the 2nd Wednesday of the month
            - For 'monthly' it is the day of the month (1 - 31)
            - For yearly, it is a full date, ie '2018-09-17'. The year you use does not matter.
        skip:
          type: integer
          format: int32
          example: 0
          description: How many occurrences to skip. 0 means skip nothing. 1 means every other.
        weekend:
          type: integer
          format: int32
          example: 1
          description: |
            How to respond when the recurring transaction falls in the weekend. Possible values:
            1. Do nothing, just create it
            2. Create no transaction.
            3. Skip to the previous Friday.
            4. Skip to the next Monday.
        description:
          type: string
          format: string
          example: "Every week on Friday"
          description: Auto-generated repetition description.
          readOnly: true
        occurrences:
          type: array
          description: "Array of future dates when the repetition will apply to. Auto generated."
          readOnly: true
          items:
            type: string
            format: date

    RecurrenceSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/RecurrenceRead'

    RecurrenceTransaction:
      type: object
      required:
        - description
        - amount
      properties:
        description:
          type: string
          format: string
          example: "Rent for the current month"
        amount:
          type: string
          format: amount
          example: "123.45"
          description: Amount of the transaction.
        foreign_amount:
          type: string
          format: amount
          example: "123.45"
          description: Foreign amount of the transaction.
          nullable: true
        currency_id:
          type: integer
          format: int32
          example: 3
          description: Submit either a currency_id or a currency_code.
        currency_code:
          type: string
          format: string
          example: "EUR"
          description: Submit either a currency_id or a currency_code.
        currency_symbol:
          type: string
          format: string
          example: "€"
          readOnly: true
        currency_decimal_places:
          type: integer
          format: int32
          example: 2
          description: Number of decimals in the currency
          readOnly: true
        foreign_currency_id:
          type: integer
          format: int32
          example: 17
          nullable: true
          description: Submit either a foreign_currency_id or a foreign_currency_code, or neither.
        foreign_currency_code:
          type: string
          format: string
          example: "GBP"
          nullable: true
          description: Submit either a foreign_currency_id or a foreign_currency_code, or neither.
        foreign_currency_symbol:
          type: string
          format: string
          example: "$"
          nullable: true
          readOnly: true
        foreign_currency_decimal_places:
          type: integer
          format: int32
          example: 2
          description: Number of decimals in the currency
          nullable: true
          readOnly: true
        budget_id:
          type: integer
          format: int32
          example: 4
          description: The budget ID for this transaction.
        budget_name:
          type: string
          format: string
          example: Groceries
          description: The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
          nullable: true
          readOnly: true
        category_id:
          type: integer
          format: int32
          description: Category ID for this transaction.
          example: 211
        category_name:
          type: string
          format: string
          description: Category name for this transaction.
          example: "Bills"
        source_id:
          type: integer
          format: int32
          example: 913
          description: ID of the source account. Submit either this or source_name.
        source_name:
          type: string
          format: string
          example: "Checking account"
          description: Name of the source account. Submit either this or source_id.
        source_iban:
          type: string
          format: string
          example: "NL02ABNA0123456789"
          nullable: true
          readOnly: true
        source_type:
          $ref: '#/components/schemas/AccountTypeProperty'
        destination_id:
          type: integer
          format: int32
          example: 258
          description: ID of the destination account. Submit either this or destination_name.
        destination_name:
          type: string
          format: string
          example: "Buy and Large"
          description: Name of the destination account. Submit either this or destination_id.
        destination_iban:
          type: string
          format: string
          example: "NL02ABNA0123456789"
          nullable: true
          readOnly: true
        destination_type:
          $ref: '#/components/schemas/AccountTypeProperty'
        tags:
          type: array
          nullable: true
          example:
          description: Array of tags.
          items:
            type: string
            format: string
            description: Tag.
            example: Barbecue preparation
        piggy_bank_id:
          type: integer
          format: int32
          description: Optional. Use either this or the piggy_bank_name
        piggy_bank_name:
          type: string
          format: string
          description: Optional. Use either this or the piggy_bank_id

    Rule:
      type: object
      required:
        - title
        - rule_group_id
        - trigger
        - triggers
        - actions
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        title:
          type: string
          format: string
          example: "First rule title."
        description:
          type: string
          format: string
          example: "First rule description"
        rule_group_id:
          type: integer
          format: int32
          example: 81
          description: "ID of the rule group under which the rule must be stored. Either this field or rule_group_title is mandatory."
        rule_group_title:
          type: string
          format: string
          example: "New rule group"
          description: "Title of the rule group under which the rule must be stored. Either this field or rule_group_id is mandatory."
        order:
          type: integer
          format: int32
          example: 5
          readOnly: true
        trigger:
          type: string
          format: string
          example: store-journal
          description: Which action is necessary for the rule to fire? Use either store-journal or update-journal.
          enum:
            - "store-journal"
            - "update-journal"
        active:
          type: boolean
          format: boolean
          example: true
          description: Whether or not the rule is even active. Default is true.
        strict:
          type: boolean
          format: boolean
          example: true
          description: If the rule is set to be strict, ALL triggers must hit in order for the rule to fire. Otherwise, just one is enough. Default value is true.
        stop_processing:
          type: boolean
          format: boolean
          example: false
          description: If this value is true and the rule is triggered, other rules  after this one in the group will be skipped. Default value is false.
        triggers:
          type: array
          items:
            $ref: '#/components/schemas/RuleTrigger'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/RuleAction'

    RuleAction:
      type: object
      required:
        - type
        - value
      properties:
        id:
          type: integer
          format: int32
          example: 2
          readOnly: true
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        type:
          type: string
          format: string
          example: "set_category"
          description: The type of thing this action will do. A limited set is possible.
          enum:
            - user_action
            - set_category
            - clear_category
            - set_budget
            - clear_budget
            - add_tag
            - remove_tag
            - remove_all_tags
            - set_description
            - append_description
            - prepend_description
            - set_source_account
            - set_destination_account
            - set_notes
            - append_notes
            - prepend_notes
            - clear_notes
            - link_to_bill
            - convert_withdrawal
            - convert_deposit
            - convert_transfer
        value:
          type: string
          format: string
          example: "Daily groceries"
          nullable: true
          description: "The accompanying value the action will set, change or update. Can be empty, but for some types this value is mandatory."
        order:
          type: integer
          format: int32
          example: 5
          description: "Order of the action"
        active:
          type: boolean
          format: boolean
          example: true
          description: If the action is active.
        stop_processing:
          type: boolean
          format: boolean
          example: false
          description: When true, other actions will not be fired after this action has fired.

    RuleArray:
      type: object
      required:
        - data
        - meta
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/RuleRead'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'

    RuleGroup:
      type: object
      required:
        - title
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        title:
          type: string
          format: string
          example: "Default rule group"
        description:
          type: string
          format: string
          example: "Description of this rule group"
        order:
          type: integer
          format: int32
          example: 4
          readOnly: true
        active:
          type: boolean
          format: boolean
          example: true

    RuleGroupArray:
      type: object
      required:
        - data
        - meta
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/RuleGroupRead'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'

    RuleGroupRead:
      type: object
      required:
        - type
        - id
        - attributes
        - links
      properties:
        type:
          type: string
          format: string
          example: "rules_group"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/RuleGroup'
        links:
          $ref: '#/components/schemas/ObjectLink'

    RuleGroupSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/RuleGroupRead'

    RuleRead:
      type: object
      required:
        - type
        - id
        - attributes
        - links
      properties:
        type:
          type: string
          format: string
          example: "rules"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/Rule'
        links:
          $ref: '#/components/schemas/ObjectLink'

    RuleSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/RuleRead'

    RuleTrigger:
      type: object
      required:
        - type
        - value
      properties:
        id:
          type: integer
          format: int32
          example: 2
          readOnly: true
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        type:
          type: string
          format: string
          example: "user_action"
          description: The type of thing this trigger responds to. A limited set is possible
          enum:
            - from_account_starts
            - from_account_ends
            - from_account_is
            - from_account_contains
            - to_account_starts
            - to_account_ends
            - to_account_is
            - to_account_contains
            - amount_less
            - amount_exactly
            - amount_more
            - description_starts
            - description_ends
            - description_contains
            - description_is
            - transaction_type
            - category_is
            - budget_is
            - tag_is
            - currency_is
            - has_attachments
            - has_no_category
            - has_any_category
            - has_no_budget
            - has_any_budget
            - has_no_tag
            - has_any_tag
            - notes_contain
            - notes_start
            - notes_end
            - notes_are
            - no_notes
            - any_notes
        value:
          type: string
          format: string
          example: "tag1"
          description: "The accompanying value the trigger responds to. This value is often mandatory, but this depends on the trigger."
        order:
          type: integer
          format: int32
          example: 5
          description: "Order of the trigger"
          readOnly: true
        active:
          type: boolean
          format: boolean
          example: true
          description: If the trigger is active.
        stop_processing:
          type: boolean
          format: boolean
          example: false
          description: When true, other triggers will not be checked if this trigger was triggered.

    SystemInfo:
      type: object
      required:
        - data
      properties:
        data:
          required:
            - version
            - api_version
            - php_version
            - os
            - driver
          properties:
            version:
              type: string
              format: semver
              example: 4.8.0
            api_version:
              type: string
              format: semver
              example: '0.10.0'
            php_version:
              type: string
              format: semver
              example: "7.2"
            os:
              type: string
              format: string
              example: Linux vagrant-ubuntu-trusty-64
            driver:
              type: string
              format: string
              example: mysql
          type: object

    TagArray:
      type: object
      required:
        - data
        - meta
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TagRead'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'

    TagCloud:
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: '#/components/schemas/TagCloudTag'

    TagCloudTag:
      title: A single tag cloud entry
      type: object
      properties:
        tag:
          type: string
          format: string
          example: "expensive"
          description: The tag
        id:
          type: integer
          format: int32
          example: 2
          description: "ID of the tag"
        size:
          type: number
          format: double
          example: 24.56
          description: "The total amount of money related to this tag. There is no currency information available, and this is a basic sum of all amounts added together."
        relative:
          type: number
          format: double
          example: 0.345
          description: "A number between 0 and 1. 1 is given to the largest tag in the tag cloud, and 0 to the smallest. The rest are given a number between 0 and 1, related to their size in comparison to the largest tag."

    TagModel:
      title: A single tag
      type: object
      required:
        - tag
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        tag:
          type: string
          format: string
          example: "expensive"
          description: The tag
        date:
          type: string
          format: date
          example: "2018-09-17"
          description: The date to which the tag is applicable.
          nullable: true
        description:
          type: string
          format: string
          example: "Tag for expensive stuff"
        latitude:
          type: number
          format: double
          example: 51.983333
          nullable: true
          description: Latitude of the tag's location, if applicable. Can be used to draw a map.
        longitude:
          type: number
          format: double
          example: 5.916667
          nullable: true
          description: Latitude of the tag's location, if applicable. Can be used to draw a map.
        zoom_level:
          type: integer
          format: int32
          example: 6
          nullable: true
          description: "Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels."

    TagRead:
      type: object
      required:
        - type
        - id
        - attributes
        - links
      properties:
        type:
          type: string
          format: string
          example: "tags"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/TagModel'
        links:
          $ref: '#/components/schemas/ObjectLink'

    TagSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/TagRead'

    Transaction:
      type: object
      required:
        - transactions
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        user:
          type: integer
          format: int32
          example: 3
          description: "User ID"
          readOnly: true
        error_if_duplicate_hash:
          type: boolean
          format: boolean
          example: false
          description: "Break if the submitted transaction exists already."
          readOnly: false
        apply_rules:
          type: boolean
          format: boolean
          example: false
          description: "Whether or not to apply rules when submitting transaction."
          readOnly: false
        group_title:
          type: string
          format: string
          description: "Title of the transaction if it has been split in more than one piece. Empty otherwise."
          example: "Split transaction title."
          readOnly: false
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionSplit'

    TransactionArray:
      type: object
      required:
        - data
        - meta
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TransactionRead'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'

    TransactionLink:
      type: object
      required:
        - link_type_id
        - inward_id
        - outward_id
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        link_type_id:
          type: integer
          format: int32
          example: 5
          description: The link type ID to use. You can also use the link_type_name field.
          writeOnly: true
        link_type_name:
          type: string
          format: string
          example: "Is paid by"
          description: The link type name to use. You can also use the link_type_id field.
          writeOnly: true
        inward_id:
          type: integer
          format: int32
          example: 131
          description: "The inward transaction transaction_journal_id for the link. This becomes the 'is paid by' transaction of the set."
        outward_id:
          type: integer
          format: int32
          example: 131
          description: "The outward transaction transaction_journal_id for the link. This becomes the 'pays for' transaction of the set."
        notes:
          type: string
          format: string
          example: "Some example notes"
          description: Optional. Some notes.

    TransactionLinkArray:
      type: object
      required:
        - data
        - meta
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TransactionLinkRead'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'

    TransactionLinkRead:
      type: object
      required:
        - type
        - id
        - attributes
        - links
      properties:
        type:
          type: string
          format: string
          example: "transactionLinks"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/TransactionLink'
        links:
          $ref: '#/components/schemas/ObjectLink'

    TransactionLinkSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/TransactionLinkRead'

    TransactionRead:
      type: object
      required:
        - type
        - id
        - attributes
        - links
      properties:
        type:
          type: string
          format: string
          example: "transactions"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/Transaction'
        links:
          $ref: '#/components/schemas/ObjectLink'

    TransactionSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/TransactionRead'

    TransactionSplit:
      type: object
      required:
        - amount
        - source_id
        - destination_id
        - date
        - description
      properties:
        user:
          type: integer
          format: int32
          example: 3
          description: "User ID"
          readOnly: true
        transaction_journal_id:
          type: integer
          format: int32
          example: 10421
          description: |
            ID of the underlying transaction journal. Each transaction consists of a transaction group (see the top ID) and one or more journals
            making up the splits of the transaction.
          readOnly: true
        type:
          type: string
          format: string
          example:  "withdrawal"
          description: Type of transaction.
          enum:
            - withdrawal
            - deposit
            - transfer
            - reconciliation
        date:
          type: string
          format: date
          example: "2018-09-17"
          description: "Date of the transaction"
        amount:
          type: string
          format: amount
          example: "123.45"
          description: "Amount of the transaction."
        description:
          type: string
          format: string
          example: "Vegetables"
          description: "Description of the transaction."
        order:
          type: integer
          format: int32
          example: 0
          nullable: true
          description: "Order of this entry in the list of transactions."
        currency_id:
          type: integer
          format: int32
          example: 12
          nullable: true
          description: Currency ID. Default is the source account's currency, or the user's default currency. Can be used instead of currency_code.
        currency_code:
          type: string
          format: string
          example: EUR
          nullable: true
          description: Currency code. Default is the source account's currency, or the user's default currency. Can be used instead of currency_id.
        currency_symbol:
          type: string
          format: string
          example: "$"
          readOnly: true
        currency_name:
          type: string
          format: string
          example: "Euro"
          readOnly: true
        currency_decimal_places:
          type: integer
          format: int32
          example: 2
          description: Number of decimals used in this currency.
          readOnly: true
        foreign_amount:
          type: string
          format: amount
          example: "123.45"
          nullable: true
          description: The amount in a foreign currency.
        foreign_currency_id:
          type: integer
          format: int32
          example: 17
          nullable: true
          description: Currency ID of the foreign currency. Default is null. Is required when you submit a foreign amount.
        foreign_currency_code:
          type: string
          format: string
          example: USD
          description: Currency code of the foreign currency. Default is NULL. Can be used instead of the foreign_currency_id, but this or the ID is required when submitting a foreign amount.
          nullable: true
        foreign_currency_symbol:
          type: string
          format: string
          example: "$"
          nullable: true
          readOnly: true
        foreign_currency_decimal_places:
          type: integer
          format: int32
          example: 2
          description: Number of decimals in the currency
          nullable: true
          readOnly: true
        budget_id:
          type: integer
          format: int32
          nullable: true
          example: 4
          description: The budget ID for this transaction.
        budget_name:
          type: string
          format: string
          example: Groceries
          description: The name of the budget to be used. If the budget name is unknown, the ID will be used or the value will be ignored.
          nullable: true
          readOnly: true
        category_id:
          type: integer
          format: int32
          nullable: true
          example: 43
          description: The category ID for this transaction.
        category_name:
          type: string
          format: string
          example: Groceries
          description: "The name of the category to be used. If the category is unknown, it will be created. If the ID and the name point to different categories, the ID overrules the name."
        source_id:
          type: integer
          format: int32
          example: 2
          nullable: true
          description: "ID of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account."
        source_name:
          type: string
          format: string
          example: "Checking account"
          nullable: true
          description: "Name of the source account. For a withdrawal or a transfer, this must always be an asset account. For deposits, this must be a revenue account. Can be used instead of the source_id. If the transaction is a deposit, the source_name can be filled in freely: the account will be created based on the name."
        source_iban:
          type: string
          format: string
          example: "NL02ABNA0123456789"
          nullable: true
          readOnly: true
        source_type:
          $ref: '#/components/schemas/AccountTypeProperty'
        destination_id:
          type: integer
          format: int32
          example: 2
          nullable: true
          description: "ID of the destination account. For a deposit or a transfer, this must always be an asset account. For withdrawals this must be an expense account."
        destination_name:
          type: string
          format: string
          example: "Buy and Large"
          nullable: true
          description: "Name of the destination account. You can submit the name instead of the ID. For everything except transfers, the account will be auto-generated if unknown, so submitting a name is enough."
        destination_iban:
          type: string
          format: string
          example: "NL02ABNA0123456789"
          nullable: true
          readOnly: true
        destination_type:
          $ref: '#/components/schemas/AccountTypeProperty'
        reconciled:
          type: boolean
          format: boolean
          example: false
          description: "If the transaction has been reconciled already. When you set this, the amount can no longer be edited by the user."
        piggy_bank_id:
          type: integer
          format: int32
          description: Optional. Use either this or the piggy_bank_name
          writeOnly: true
        piggy_bank_name:
          type: string
          format: string
          description: Optional. Use either this or the piggy_bank_id
          writeOnly: true
        bill_id:
          type: integer
          format: int32
          nullable: true
          example: 111
          description: Optional. Use either this or the bill_name
        bill_name:
          type: string
          format: string
          example: "Monthly rent"
          nullable: true
          description: Optional. Use either this or the bill_id
        tags:
          type: array
          nullable: true
          example:
          description: Array of tags.
          items:
            type: string
            format: string
            description: Tag.
            example: Barbecue preparation
        notes:
          type: string
          format: string
          example: "Some example notes"
          nullable: true
        internal_reference:
          type: string
          format: string
          nullable: true
          description: Reference to internal reference of other systems.
        external_id:
          type: string
          nullable: true
          format: string
          description: Reference to external ID in other systems.
        original_source:
          type: string
          nullable: true
          format: string
          description: System generated identifier for original creator of transaction.
          readOnly: true
        recurrence_id:
          type: integer
          nullable: true
          format: int32
          description: Reference to recurrence that made the transaction.
          readOnly: true
        bunq_payment_id:
          type: string
          nullable: true
          format: string
          description: Internal ID of bunq transaction.
        import_hash_v2:
          type: string
          nullable: true
          format: string
          description: Hash value of original import transaction (for duplicate detection).
          readOnly: true
        sepa_cc:
          type: string
          format: string
          nullable: true
          description: SEPA Clearing Code
        sepa_ct_op:
          type: string
          format: string
          description: SEPA Opposing Account Identifier
        sepa_ct_id:
          type: string
          format: string
          nullable: true
          description: SEPA end-to-end Identifier
        sepa_db:
          type: string
          format: string
          nullable: true
          description: SEPA mandate identifier
        sepa_country:
          type: string
          nullable: true
          format: string
          description: SEPA Country
        sepa_ep:
          type: string
          nullable: true
          format: string
          description: SEPA External Purpose indicator
        sepa_ci:
          type: string
          format: string
          nullable: true
          description: SEPA Creditor Identifier
        sepa_batch_id:
          type: string
          format: string
          nullable: true
          description: SEPA Batch ID
        interest_date:
          type: string
          format: date
          nullable: true
        book_date:
          type: string
          format: date
          nullable: true
        process_date:
          type: string
          format: date
          nullable: true
        due_date:
          type: string
          format: date
          nullable: true
        payment_date:
          type: string
          format: date
          nullable: true
        invoice_date:
          type: string
          format: date
          nullable: true

    TransactionTypeFilter:
      type: string
      enum:
        - all
        - withdrawal
        - withdrawals
        - expense
        - deposit
        - deposits
        - income
        - transfer
        - transfers
        - opening_balance
        - reconciliation
        - special
        - specials
        - default

    User:
      title: A single user
      type: object
      required:
        - email
      properties:
        created_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        updated_at:
          type: string
          format: date-time
          example: "2018-09-17T12:46:47+01:00"
          readOnly: true
        email:
          type: string
          format: email
          example: "james@firefly-iii.org"
          description: The new users email address.
        blocked:
          type: boolean
          format: boolean
          example: false
          description: Boolean to indicate if the user is blocked.
        blocked_code:
          type: string
          format: string
          nullable: true
          example: "email_changed"
          description: If you say the user must be blocked, this will be the reason code.
          enum:
            - email_changed
        role:
          type: string
          format: string
          nullable: true
          example: "owner"
          description: Role for the new user. Can be empty or omitted.
          enum:
            - owner
            - demo

    UserArray:
      type: object
      required:
        - data
        - meta
        - links
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserRead'
        meta:
          $ref: '#/components/schemas/Meta'
        links:
          $ref: '#/components/schemas/PageLink'

    UserRead:
      type: object
      required:
        - type
        - id
        - attributes
        - links
      properties:
        type:
          type: string
          format: string
          example: "users"
          description: "Immutable value"
        id:
          type: string
          format: string
          example: 2
        attributes:
          $ref: '#/components/schemas/User'
        links:
          $ref: '#/components/schemas/ObjectLink'

    UserSingle:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/UserRead'

    ValidationError:
      type: object
      properties:
        message:
          type: string
          format: string
          example: "The given data was invalid."
        errors:
          type: object
          properties:
            field1:
              type: array
              items:
                type: string
                format: string
            field2:
              type: array
              items:
                type: string
                format: string

  securitySchemes:
    firefly_iii_auth:
      type: oauth2
      description: Default OAuth2 flow
      flows:
        authorizationCode:
          authorizationUrl: https://demo.firefly-iii.org/oauth/authorize
          tokenUrl: https://demo.firefly-iii.org/oauth/token
          refreshUrl: https://demo.firefly-iii.org/oauth/token
          scopes: {}
security:
  - firefly_iii_auth: []
